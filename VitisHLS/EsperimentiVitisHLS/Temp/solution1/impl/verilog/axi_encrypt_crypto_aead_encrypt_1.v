// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module axi_encrypt_crypto_aead_encrypt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        c,
        m,
        ad,
        npub,
        k
);

parameter    ap_ST_fsm_state1 = 82'd1;
parameter    ap_ST_fsm_state2 = 82'd2;
parameter    ap_ST_fsm_state3 = 82'd4;
parameter    ap_ST_fsm_state4 = 82'd8;
parameter    ap_ST_fsm_state5 = 82'd16;
parameter    ap_ST_fsm_state6 = 82'd32;
parameter    ap_ST_fsm_state7 = 82'd64;
parameter    ap_ST_fsm_state8 = 82'd128;
parameter    ap_ST_fsm_state9 = 82'd256;
parameter    ap_ST_fsm_state10 = 82'd512;
parameter    ap_ST_fsm_state11 = 82'd1024;
parameter    ap_ST_fsm_state12 = 82'd2048;
parameter    ap_ST_fsm_state13 = 82'd4096;
parameter    ap_ST_fsm_state14 = 82'd8192;
parameter    ap_ST_fsm_state15 = 82'd16384;
parameter    ap_ST_fsm_state16 = 82'd32768;
parameter    ap_ST_fsm_state17 = 82'd65536;
parameter    ap_ST_fsm_state18 = 82'd131072;
parameter    ap_ST_fsm_state19 = 82'd262144;
parameter    ap_ST_fsm_state20 = 82'd524288;
parameter    ap_ST_fsm_state21 = 82'd1048576;
parameter    ap_ST_fsm_state22 = 82'd2097152;
parameter    ap_ST_fsm_state23 = 82'd4194304;
parameter    ap_ST_fsm_state24 = 82'd8388608;
parameter    ap_ST_fsm_state25 = 82'd16777216;
parameter    ap_ST_fsm_state26 = 82'd33554432;
parameter    ap_ST_fsm_state27 = 82'd67108864;
parameter    ap_ST_fsm_state28 = 82'd134217728;
parameter    ap_ST_fsm_state29 = 82'd268435456;
parameter    ap_ST_fsm_state30 = 82'd536870912;
parameter    ap_ST_fsm_state31 = 82'd1073741824;
parameter    ap_ST_fsm_state32 = 82'd2147483648;
parameter    ap_ST_fsm_state33 = 82'd4294967296;
parameter    ap_ST_fsm_state34 = 82'd8589934592;
parameter    ap_ST_fsm_state35 = 82'd17179869184;
parameter    ap_ST_fsm_state36 = 82'd34359738368;
parameter    ap_ST_fsm_state37 = 82'd68719476736;
parameter    ap_ST_fsm_state38 = 82'd137438953472;
parameter    ap_ST_fsm_state39 = 82'd274877906944;
parameter    ap_ST_fsm_state40 = 82'd549755813888;
parameter    ap_ST_fsm_state41 = 82'd1099511627776;
parameter    ap_ST_fsm_state42 = 82'd2199023255552;
parameter    ap_ST_fsm_state43 = 82'd4398046511104;
parameter    ap_ST_fsm_state44 = 82'd8796093022208;
parameter    ap_ST_fsm_state45 = 82'd17592186044416;
parameter    ap_ST_fsm_state46 = 82'd35184372088832;
parameter    ap_ST_fsm_state47 = 82'd70368744177664;
parameter    ap_ST_fsm_state48 = 82'd140737488355328;
parameter    ap_ST_fsm_state49 = 82'd281474976710656;
parameter    ap_ST_fsm_state50 = 82'd562949953421312;
parameter    ap_ST_fsm_state51 = 82'd1125899906842624;
parameter    ap_ST_fsm_state52 = 82'd2251799813685248;
parameter    ap_ST_fsm_state53 = 82'd4503599627370496;
parameter    ap_ST_fsm_state54 = 82'd9007199254740992;
parameter    ap_ST_fsm_state55 = 82'd18014398509481984;
parameter    ap_ST_fsm_state56 = 82'd36028797018963968;
parameter    ap_ST_fsm_state57 = 82'd72057594037927936;
parameter    ap_ST_fsm_state58 = 82'd144115188075855872;
parameter    ap_ST_fsm_state59 = 82'd288230376151711744;
parameter    ap_ST_fsm_state60 = 82'd576460752303423488;
parameter    ap_ST_fsm_state61 = 82'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 82'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 82'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 82'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 82'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 82'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 82'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 82'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 82'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 82'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 82'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 82'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 82'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 82'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 82'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 82'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 82'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 82'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 82'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 82'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 82'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 82'd2417851639229258349412352;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [7:0] m_axi_gmem_WDATA;
output  [0:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [7:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [10:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] c;
input  [63:0] m;
input  [63:0] ad;
input  [63:0] npub;
input  [63:0] k;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg[7:0] m_axi_gmem_WDATA;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [81:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state45;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state82;
wire   [63:0] grp_LOADBYTES_1_fu_418_ap_return;
reg   [63:0] reg_480;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state44;
reg   [63:0] reg_485;
wire    ap_CS_fsm_state8;
wire    grp_LOADBYTES_1_fu_418_ap_done;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
reg   [63:0] reg_490;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state43;
reg   [63:0] reg_495;
reg   [63:0] reg_500;
reg   [63:0] reg_505;
reg   [63:0] K0_reg_1293;
wire    ap_CS_fsm_state2;
wire   [7:0] trunc_ln87_fu_510_p1;
reg   [7:0] trunc_ln87_reg_1301;
wire   [55:0] trunc_ln87_2_fu_514_p1;
reg   [55:0] trunc_ln87_2_reg_1306;
wire   [47:0] trunc_ln87_4_fu_518_p1;
reg   [47:0] trunc_ln87_4_reg_1311;
wire   [39:0] trunc_ln87_6_fu_522_p1;
reg   [39:0] trunc_ln87_6_reg_1316;
wire   [31:0] trunc_ln87_8_fu_526_p1;
reg   [31:0] trunc_ln87_8_reg_1321;
wire   [23:0] trunc_ln87_10_fu_530_p1;
reg   [23:0] trunc_ln87_10_reg_1326;
wire   [15:0] trunc_ln87_12_fu_534_p1;
reg   [15:0] trunc_ln87_12_reg_1331;
reg   [63:0] K1_reg_1336;
wire    ap_CS_fsm_state4;
wire   [7:0] trunc_ln88_fu_538_p1;
reg   [7:0] trunc_ln88_reg_1344;
wire   [55:0] trunc_ln88_2_fu_542_p1;
reg   [55:0] trunc_ln88_2_reg_1349;
wire   [47:0] trunc_ln88_4_fu_546_p1;
reg   [47:0] trunc_ln88_4_reg_1354;
wire   [39:0] trunc_ln88_6_fu_550_p1;
reg   [39:0] trunc_ln88_6_reg_1359;
wire   [31:0] trunc_ln88_8_fu_554_p1;
reg   [31:0] trunc_ln88_8_reg_1364;
wire   [23:0] trunc_ln88_10_fu_558_p1;
reg   [23:0] trunc_ln88_10_reg_1369;
wire   [15:0] trunc_ln88_12_fu_562_p1;
reg   [15:0] trunc_ln88_12_reg_1374;
wire    ap_CS_fsm_state5;
wire   [63:0] s_3_14_fu_578_p2;
reg   [63:0] s_3_14_reg_1389;
wire   [63:0] s_4_13_fu_583_p2;
reg   [63:0] s_4_13_reg_1394;
wire   [63:0] s_0_12_fu_588_p2;
reg   [63:0] s_0_12_reg_1399;
wire   [63:0] s_0_19_fu_598_p2;
reg   [63:0] s_0_19_reg_1404;
wire   [63:0] s_0_26_fu_614_p2;
reg   [63:0] s_0_26_reg_1409;
wire   [63:0] s_4_32_fu_624_p2;
reg   [63:0] s_4_32_reg_1419;
wire   [63:0] s_0_33_fu_686_p2;
reg   [63:0] s_0_33_reg_1424;
reg   [7:0] trunc_ln1_reg_1429;
reg   [7:0] trunc_ln29_1_reg_1434;
reg   [7:0] trunc_ln29_2_reg_1439;
reg   [7:0] trunc_ln29_3_reg_1444;
reg   [7:0] trunc_ln29_4_reg_1449;
reg   [7:0] trunc_ln29_5_reg_1454;
reg   [7:0] trunc_ln29_6_reg_1459;
wire   [7:0] xor_ln29_fu_798_p2;
reg   [7:0] xor_ln29_reg_1464;
wire   [7:0] trunc_ln65_14_fu_804_p1;
reg   [7:0] trunc_ln65_14_reg_1469;
wire   [55:0] trunc_ln65_16_fu_808_p1;
reg   [55:0] trunc_ln65_16_reg_1474;
wire   [47:0] trunc_ln65_18_fu_812_p1;
reg   [47:0] trunc_ln65_18_reg_1479;
wire   [39:0] trunc_ln65_20_fu_816_p1;
reg   [39:0] trunc_ln65_20_reg_1484;
wire   [31:0] trunc_ln65_22_fu_820_p1;
reg   [31:0] trunc_ln65_22_reg_1489;
wire   [23:0] trunc_ln65_24_fu_824_p1;
reg   [23:0] trunc_ln65_24_reg_1494;
wire   [15:0] trunc_ln65_26_fu_828_p1;
reg   [15:0] trunc_ln65_26_reg_1499;
wire   [63:0] s_0_40_fu_860_p2;
reg   [63:0] s_0_40_reg_1504;
reg   [7:0] trunc_ln29_7_reg_1509;
reg   [7:0] trunc_ln29_8_reg_1514;
reg   [7:0] trunc_ln29_9_reg_1519;
reg   [7:0] trunc_ln29_s_reg_1524;
reg   [7:0] trunc_ln29_10_reg_1529;
reg   [7:0] trunc_ln29_11_reg_1534;
reg   [7:0] trunc_ln29_12_reg_1539;
wire   [7:0] xor_ln29_1_fu_966_p2;
reg   [7:0] xor_ln29_1_reg_1544;
wire   [63:0] s_0_47_fu_996_p2;
reg   [63:0] s_0_47_reg_1586;
wire   [63:0] s_1_43_fu_1002_p2;
reg   [63:0] s_1_43_reg_1591;
wire   [63:0] s_2_43_fu_1007_p2;
reg   [63:0] s_2_43_reg_1596;
reg   [7:0] trunc_ln29_13_reg_1601;
reg   [7:0] trunc_ln29_14_reg_1606;
reg   [7:0] trunc_ln29_15_reg_1611;
reg   [7:0] trunc_ln29_16_reg_1616;
reg   [7:0] trunc_ln29_17_reg_1621;
reg   [7:0] trunc_ln29_18_reg_1626;
reg   [7:0] trunc_ln29_19_reg_1631;
wire   [7:0] xor_ln29_2_fu_1208_p2;
reg   [7:0] xor_ln29_2_reg_1636;
reg   [7:0] trunc_ln29_20_reg_1641;
reg   [7:0] trunc_ln29_21_reg_1646;
reg   [7:0] trunc_ln29_22_reg_1651;
reg   [7:0] trunc_ln29_23_reg_1656;
reg   [7:0] trunc_ln29_24_reg_1661;
reg   [7:0] trunc_ln29_25_reg_1666;
reg   [7:0] trunc_ln29_26_reg_1671;
wire   [7:0] xor_ln29_3_fu_1283_p2;
reg   [7:0] xor_ln29_3_reg_1676;
wire    grp_LOADBYTES_1_fu_418_ap_start;
wire    grp_LOADBYTES_1_fu_418_ap_idle;
wire    grp_LOADBYTES_1_fu_418_ap_ready;
wire    grp_LOADBYTES_1_fu_418_m_axi_gmem_AWVALID;
wire   [63:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWADDR;
wire   [0:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWID;
wire   [31:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWLEN;
wire   [2:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWSIZE;
wire   [1:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWBURST;
wire   [1:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWLOCK;
wire   [3:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWCACHE;
wire   [2:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWPROT;
wire   [3:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWQOS;
wire   [3:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWREGION;
wire   [0:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_AWUSER;
wire    grp_LOADBYTES_1_fu_418_m_axi_gmem_WVALID;
wire   [7:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_WDATA;
wire   [0:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_WSTRB;
wire    grp_LOADBYTES_1_fu_418_m_axi_gmem_WLAST;
wire   [0:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_WID;
wire   [0:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_WUSER;
wire    grp_LOADBYTES_1_fu_418_m_axi_gmem_ARVALID;
wire   [63:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARADDR;
wire   [0:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARID;
wire   [31:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLEN;
wire   [2:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARSIZE;
wire   [1:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARBURST;
wire   [1:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLOCK;
wire   [3:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARCACHE;
wire   [2:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARPROT;
wire   [3:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARQOS;
wire   [3:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARREGION;
wire   [0:0] grp_LOADBYTES_1_fu_418_m_axi_gmem_ARUSER;
wire    grp_LOADBYTES_1_fu_418_m_axi_gmem_RREADY;
wire    grp_LOADBYTES_1_fu_418_m_axi_gmem_BREADY;
reg   [63:0] grp_LOADBYTES_1_fu_418_bytes;
reg   [3:0] grp_LOADBYTES_1_fu_418_n;
reg   [4:0] grp_LOADBYTES_1_fu_418_idx;
wire    grp_ROUND_6_fu_436_ap_ready;
reg   [63:0] grp_ROUND_6_fu_436_s_0_read;
reg   [63:0] grp_ROUND_6_fu_436_s_1_read;
reg   [63:0] grp_ROUND_6_fu_436_s_2_read;
reg   [63:0] grp_ROUND_6_fu_436_s_3_read;
reg   [63:0] grp_ROUND_6_fu_436_s_4_read;
reg   [7:0] grp_ROUND_6_fu_436_C;
wire   [63:0] grp_ROUND_6_fu_436_ap_return_0;
wire   [63:0] grp_ROUND_6_fu_436_ap_return_1;
wire   [63:0] grp_ROUND_6_fu_436_ap_return_2;
wire   [63:0] grp_ROUND_6_fu_436_ap_return_3;
wire   [63:0] grp_ROUND_6_fu_436_ap_return_4;
reg    grp_LOADBYTES_1_fu_418_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
wire   [63:0] xor_ln52_fu_608_p2;
wire   [15:0] trunc_ln65_13_fu_682_p1;
wire   [15:0] trunc_ln65_12_fu_678_p1;
wire   [23:0] trunc_ln65_11_fu_674_p1;
wire   [23:0] trunc_ln65_10_fu_670_p1;
wire   [31:0] trunc_ln65_9_fu_666_p1;
wire   [31:0] trunc_ln65_8_fu_662_p1;
wire   [39:0] trunc_ln65_7_fu_658_p1;
wire   [39:0] trunc_ln65_6_fu_654_p1;
wire   [47:0] trunc_ln65_5_fu_650_p1;
wire   [47:0] trunc_ln65_4_fu_646_p1;
wire   [55:0] trunc_ln65_3_fu_642_p1;
wire   [55:0] trunc_ln65_2_fu_638_p1;
wire   [55:0] xor_ln65_6_fu_722_p2;
wire   [47:0] xor_ln65_5_fu_716_p2;
wire   [39:0] xor_ln65_4_fu_710_p2;
wire   [31:0] xor_ln65_3_fu_704_p2;
wire   [23:0] xor_ln65_2_fu_698_p2;
wire   [15:0] xor_ln65_1_fu_692_p2;
wire   [7:0] trunc_ln65_1_fu_634_p1;
wire   [7:0] trunc_ln65_fu_630_p1;
wire   [15:0] trunc_ln65_27_fu_856_p1;
wire   [23:0] trunc_ln65_25_fu_852_p1;
wire   [31:0] trunc_ln65_23_fu_848_p1;
wire   [39:0] trunc_ln65_21_fu_844_p1;
wire   [47:0] trunc_ln65_19_fu_840_p1;
wire   [55:0] trunc_ln65_17_fu_836_p1;
wire   [55:0] xor_ln65_12_fu_891_p2;
wire   [47:0] xor_ln65_11_fu_886_p2;
wire   [39:0] xor_ln65_10_fu_881_p2;
wire   [31:0] xor_ln65_9_fu_876_p2;
wire   [23:0] xor_ln65_8_fu_871_p2;
wire   [15:0] xor_ln65_7_fu_866_p2;
wire   [7:0] trunc_ln65_15_fu_832_p1;
wire   [63:0] xor_ln78_fu_990_p2;
wire   [15:0] trunc_ln87_13_fu_1036_p1;
wire   [23:0] trunc_ln87_11_fu_1032_p1;
wire   [31:0] trunc_ln87_9_fu_1028_p1;
wire   [39:0] trunc_ln87_7_fu_1024_p1;
wire   [47:0] trunc_ln87_5_fu_1020_p1;
wire   [55:0] trunc_ln87_3_fu_1016_p1;
wire   [15:0] trunc_ln88_13_fu_1099_p1;
wire   [23:0] trunc_ln88_11_fu_1095_p1;
wire   [31:0] trunc_ln88_9_fu_1091_p1;
wire   [39:0] trunc_ln88_7_fu_1087_p1;
wire   [47:0] trunc_ln88_5_fu_1083_p1;
wire   [55:0] trunc_ln88_3_fu_1079_p1;
wire   [63:0] s_3_fu_1040_p2;
wire   [55:0] xor_ln87_6_fu_1070_p2;
wire   [47:0] xor_ln87_5_fu_1065_p2;
wire   [39:0] xor_ln87_4_fu_1060_p2;
wire   [31:0] xor_ln87_3_fu_1055_p2;
wire   [23:0] xor_ln87_2_fu_1050_p2;
wire   [15:0] xor_ln87_1_fu_1045_p2;
wire   [7:0] trunc_ln87_1_fu_1012_p1;
wire   [63:0] xor_ln88_fu_1103_p2;
wire   [55:0] xor_ln27_5_fu_1133_p2;
wire   [47:0] xor_ln27_4_fu_1128_p2;
wire   [39:0] xor_ln27_3_fu_1123_p2;
wire   [31:0] xor_ln27_2_fu_1118_p2;
wire   [23:0] xor_ln27_1_fu_1113_p2;
wire   [15:0] xor_ln27_fu_1108_p2;
wire   [7:0] trunc_ln88_1_fu_1075_p1;
reg   [81:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
reg    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
reg    ap_ST_fsm_state47_blk;
reg    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
reg    ap_ST_fsm_state51_blk;
reg    ap_ST_fsm_state52_blk;
reg    ap_ST_fsm_state53_blk;
reg    ap_ST_fsm_state54_blk;
reg    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
reg    ap_ST_fsm_state60_blk;
reg    ap_ST_fsm_state61_blk;
reg    ap_ST_fsm_state62_blk;
reg    ap_ST_fsm_state63_blk;
reg    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
reg    ap_ST_fsm_state66_blk;
reg    ap_ST_fsm_state67_blk;
reg    ap_ST_fsm_state68_blk;
reg    ap_ST_fsm_state69_blk;
reg    ap_ST_fsm_state70_blk;
reg    ap_ST_fsm_state71_blk;
reg    ap_ST_fsm_state72_blk;
reg    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
reg    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
reg    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
reg    ap_ST_fsm_state82_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 82'd1;
#0 grp_LOADBYTES_1_fu_418_ap_start_reg = 1'b0;
end

axi_encrypt_LOADBYTES_1 grp_LOADBYTES_1_fu_418(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_LOADBYTES_1_fu_418_ap_start),
    .ap_done(grp_LOADBYTES_1_fu_418_ap_done),
    .ap_idle(grp_LOADBYTES_1_fu_418_ap_idle),
    .ap_ready(grp_LOADBYTES_1_fu_418_ap_ready),
    .m_axi_gmem_AWVALID(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_LOADBYTES_1_fu_418_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_LOADBYTES_1_fu_418_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_LOADBYTES_1_fu_418_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_LOADBYTES_1_fu_418_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_LOADBYTES_1_fu_418_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_LOADBYTES_1_fu_418_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_LOADBYTES_1_fu_418_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(m_axi_gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_LOADBYTES_1_fu_418_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(m_axi_gmem_RVALID),
    .m_axi_gmem_RREADY(grp_LOADBYTES_1_fu_418_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(m_axi_gmem_RDATA),
    .m_axi_gmem_RLAST(m_axi_gmem_RLAST),
    .m_axi_gmem_RID(m_axi_gmem_RID),
    .m_axi_gmem_RFIFONUM(m_axi_gmem_RFIFONUM),
    .m_axi_gmem_RUSER(m_axi_gmem_RUSER),
    .m_axi_gmem_RRESP(m_axi_gmem_RRESP),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_LOADBYTES_1_fu_418_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .bytes(grp_LOADBYTES_1_fu_418_bytes),
    .n(grp_LOADBYTES_1_fu_418_n),
    .idx(grp_LOADBYTES_1_fu_418_idx),
    .ap_return(grp_LOADBYTES_1_fu_418_ap_return)
);

axi_encrypt_ROUND_6 grp_ROUND_6_fu_436(
    .ap_ready(grp_ROUND_6_fu_436_ap_ready),
    .s_0_read(grp_ROUND_6_fu_436_s_0_read),
    .s_1_read(grp_ROUND_6_fu_436_s_1_read),
    .s_2_read(grp_ROUND_6_fu_436_s_2_read),
    .s_3_read(grp_ROUND_6_fu_436_s_3_read),
    .s_4_read(grp_ROUND_6_fu_436_s_4_read),
    .C(grp_ROUND_6_fu_436_C),
    .ap_return_0(grp_ROUND_6_fu_436_ap_return_0),
    .ap_return_1(grp_ROUND_6_fu_436_ap_return_1),
    .ap_return_2(grp_ROUND_6_fu_436_ap_return_2),
    .ap_return_3(grp_ROUND_6_fu_436_ap_return_3),
    .ap_return_4(grp_ROUND_6_fu_436_ap_return_4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_LOADBYTES_1_fu_418_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_LOADBYTES_1_fu_418_ap_start_reg <= 1'b1;
        end else if ((grp_LOADBYTES_1_fu_418_ap_ready == 1'b1)) begin
            grp_LOADBYTES_1_fu_418_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        K0_reg_1293 <= grp_LOADBYTES_1_fu_418_ap_return;
        trunc_ln87_10_reg_1326 <= trunc_ln87_10_fu_530_p1;
        trunc_ln87_12_reg_1331 <= trunc_ln87_12_fu_534_p1;
        trunc_ln87_2_reg_1306 <= trunc_ln87_2_fu_514_p1;
        trunc_ln87_4_reg_1311 <= trunc_ln87_4_fu_518_p1;
        trunc_ln87_6_reg_1316 <= trunc_ln87_6_fu_522_p1;
        trunc_ln87_8_reg_1321 <= trunc_ln87_8_fu_526_p1;
        trunc_ln87_reg_1301 <= trunc_ln87_fu_510_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        K1_reg_1336 <= grp_LOADBYTES_1_fu_418_ap_return;
        trunc_ln88_10_reg_1369 <= trunc_ln88_10_fu_558_p1;
        trunc_ln88_12_reg_1374 <= trunc_ln88_12_fu_562_p1;
        trunc_ln88_2_reg_1349 <= trunc_ln88_2_fu_542_p1;
        trunc_ln88_4_reg_1354 <= trunc_ln88_4_fu_546_p1;
        trunc_ln88_6_reg_1359 <= trunc_ln88_6_fu_550_p1;
        trunc_ln88_8_reg_1364 <= trunc_ln88_8_fu_554_p1;
        trunc_ln88_reg_1344 <= trunc_ln88_fu_538_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_480 <= grp_LOADBYTES_1_fu_418_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((grp_LOADBYTES_1_fu_418_ap_done 
    == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state59) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state57) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state55) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state54) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state50) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (m_axi_gmem_AWREADY == 1'b1)))) begin
        reg_485 <= grp_ROUND_6_fu_436_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 
    == ap_CS_fsm_state31)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state59) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state57) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state55) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state54) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 
    == ap_CS_fsm_state50) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (m_axi_gmem_AWREADY == 1'b1)))) begin
        reg_490 <= grp_ROUND_6_fu_436_ap_return_1;
        reg_495 <= grp_ROUND_6_fu_436_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 
    == ap_CS_fsm_state31)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state59) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state57) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state55) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state54) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state50) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state49) 
    & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (m_axi_gmem_AWREADY == 1'b1)))) begin
        reg_500 <= grp_ROUND_6_fu_436_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 
    == ap_CS_fsm_state25)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state59) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state57) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state55) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state54) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state50) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state49) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (m_axi_gmem_WREADY 
    == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (m_axi_gmem_AWREADY == 1'b1)))) begin
        reg_505 <= grp_ROUND_6_fu_436_ap_return_4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        s_0_12_reg_1399 <= s_0_12_fu_588_p2;
        s_3_14_reg_1389 <= s_3_14_fu_578_p2;
        s_4_13_reg_1394 <= s_4_13_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        s_0_19_reg_1404 <= s_0_19_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        s_0_26_reg_1409 <= s_0_26_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        s_0_33_reg_1424 <= s_0_33_fu_686_p2;
        s_4_32_reg_1419 <= s_4_32_fu_624_p2;
        trunc_ln1_reg_1429 <= {{s_0_33_fu_686_p2[63:56]}};
        trunc_ln29_1_reg_1434 <= {{xor_ln65_6_fu_722_p2[55:48]}};
        trunc_ln29_2_reg_1439 <= {{xor_ln65_5_fu_716_p2[47:40]}};
        trunc_ln29_3_reg_1444 <= {{xor_ln65_4_fu_710_p2[39:32]}};
        trunc_ln29_4_reg_1449 <= {{xor_ln65_3_fu_704_p2[31:24]}};
        trunc_ln29_5_reg_1454 <= {{xor_ln65_2_fu_698_p2[23:16]}};
        trunc_ln29_6_reg_1459 <= {{xor_ln65_1_fu_692_p2[15:8]}};
        xor_ln29_reg_1464 <= xor_ln29_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        s_0_40_reg_1504 <= s_0_40_fu_860_p2;
        trunc_ln29_10_reg_1529 <= {{xor_ln65_9_fu_876_p2[31:24]}};
        trunc_ln29_11_reg_1534 <= {{xor_ln65_8_fu_871_p2[23:16]}};
        trunc_ln29_12_reg_1539 <= {{xor_ln65_7_fu_866_p2[15:8]}};
        trunc_ln29_7_reg_1509 <= {{s_0_40_fu_860_p2[63:56]}};
        trunc_ln29_8_reg_1514 <= {{xor_ln65_12_fu_891_p2[55:48]}};
        trunc_ln29_9_reg_1519 <= {{xor_ln65_11_fu_886_p2[47:40]}};
        trunc_ln29_s_reg_1524 <= {{xor_ln65_10_fu_881_p2[39:32]}};
        xor_ln29_1_reg_1544 <= xor_ln29_1_fu_966_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        s_0_47_reg_1586 <= s_0_47_fu_996_p2;
        s_1_43_reg_1591 <= s_1_43_fu_1002_p2;
        s_2_43_reg_1596 <= s_2_43_fu_1007_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        trunc_ln29_13_reg_1601 <= {{s_3_fu_1040_p2[63:56]}};
        trunc_ln29_14_reg_1606 <= {{xor_ln87_6_fu_1070_p2[55:48]}};
        trunc_ln29_15_reg_1611 <= {{xor_ln87_5_fu_1065_p2[47:40]}};
        trunc_ln29_16_reg_1616 <= {{xor_ln87_4_fu_1060_p2[39:32]}};
        trunc_ln29_17_reg_1621 <= {{xor_ln87_3_fu_1055_p2[31:24]}};
        trunc_ln29_18_reg_1626 <= {{xor_ln87_2_fu_1050_p2[23:16]}};
        trunc_ln29_19_reg_1631 <= {{xor_ln87_1_fu_1045_p2[15:8]}};
        trunc_ln29_20_reg_1641 <= {{xor_ln88_fu_1103_p2[63:56]}};
        trunc_ln29_21_reg_1646 <= {{xor_ln27_5_fu_1133_p2[55:48]}};
        trunc_ln29_22_reg_1651 <= {{xor_ln27_4_fu_1128_p2[47:40]}};
        trunc_ln29_23_reg_1656 <= {{xor_ln27_3_fu_1123_p2[39:32]}};
        trunc_ln29_24_reg_1661 <= {{xor_ln27_2_fu_1118_p2[31:24]}};
        trunc_ln29_25_reg_1666 <= {{xor_ln27_1_fu_1113_p2[23:16]}};
        trunc_ln29_26_reg_1671 <= {{xor_ln27_fu_1108_p2[15:8]}};
        xor_ln29_2_reg_1636 <= xor_ln29_2_fu_1208_p2;
        xor_ln29_3_reg_1676 <= xor_ln29_3_fu_1283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        trunc_ln65_14_reg_1469 <= trunc_ln65_14_fu_804_p1;
        trunc_ln65_16_reg_1474 <= trunc_ln65_16_fu_808_p1;
        trunc_ln65_18_reg_1479 <= trunc_ln65_18_fu_812_p1;
        trunc_ln65_20_reg_1484 <= trunc_ln65_20_fu_816_p1;
        trunc_ln65_22_reg_1489 <= trunc_ln65_22_fu_820_p1;
        trunc_ln65_24_reg_1494 <= trunc_ln65_24_fu_824_p1;
        trunc_ln65_26_reg_1499 <= trunc_ln65_26_fu_828_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state42_blk = 1'b1;
    end else begin
        ap_ST_fsm_state42_blk = 1'b0;
    end
end

assign ap_ST_fsm_state43_blk = 1'b0;

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state47_blk = 1'b1;
    end else begin
        ap_ST_fsm_state47_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state48_blk = 1'b1;
    end else begin
        ap_ST_fsm_state48_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state51_blk = 1'b1;
    end else begin
        ap_ST_fsm_state51_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state52_blk = 1'b1;
    end else begin
        ap_ST_fsm_state52_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state53_blk = 1'b1;
    end else begin
        ap_ST_fsm_state53_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state54_blk = 1'b1;
    end else begin
        ap_ST_fsm_state54_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state55_blk = 1'b1;
    end else begin
        ap_ST_fsm_state55_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state60_blk = 1'b1;
    end else begin
        ap_ST_fsm_state60_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state61_blk = 1'b1;
    end else begin
        ap_ST_fsm_state61_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state62_blk = 1'b1;
    end else begin
        ap_ST_fsm_state62_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state63_blk = 1'b1;
    end else begin
        ap_ST_fsm_state63_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state64_blk = 1'b1;
    end else begin
        ap_ST_fsm_state64_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state66_blk = 1'b1;
    end else begin
        ap_ST_fsm_state66_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state67_blk = 1'b1;
    end else begin
        ap_ST_fsm_state67_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state68_blk = 1'b1;
    end else begin
        ap_ST_fsm_state68_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state69_blk = 1'b1;
    end else begin
        ap_ST_fsm_state69_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state70_blk = 1'b1;
    end else begin
        ap_ST_fsm_state70_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state71_blk = 1'b1;
    end else begin
        ap_ST_fsm_state71_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state72_blk = 1'b1;
    end else begin
        ap_ST_fsm_state72_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state73_blk = 1'b1;
    end else begin
        ap_ST_fsm_state73_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state77_blk = 1'b1;
    end else begin
        ap_ST_fsm_state77_blk = 1'b0;
    end
end

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state82_blk = 1'b1;
    end else begin
        ap_ST_fsm_state82_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_LOADBYTES_1_fu_418_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state82) & (m_axi_gmem_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) & (m_axi_gmem_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42))) begin
        grp_LOADBYTES_1_fu_418_bytes = m;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_LOADBYTES_1_fu_418_bytes = ad;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_LOADBYTES_1_fu_418_bytes = npub;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_LOADBYTES_1_fu_418_bytes = k;
    end else begin
        grp_LOADBYTES_1_fu_418_bytes = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state44))) begin
        grp_LOADBYTES_1_fu_418_idx = 5'd16;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state42))) begin
        grp_LOADBYTES_1_fu_418_idx = 5'd8;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_LOADBYTES_1_fu_418_idx = 5'd0;
    end else begin
        grp_LOADBYTES_1_fu_418_idx = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state44))) begin
        grp_LOADBYTES_1_fu_418_n = 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_LOADBYTES_1_fu_418_n = 4'd8;
    end else begin
        grp_LOADBYTES_1_fu_418_n = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state49))) begin
        grp_ROUND_6_fu_436_C = 8'd75;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state48))) begin
        grp_ROUND_6_fu_436_C = 8'd90;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state47))) begin
        grp_ROUND_6_fu_436_C = 8'd105;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state46))) begin
        grp_ROUND_6_fu_436_C = 8'd120;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_ROUND_6_fu_436_C = 8'd135;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state56))) begin
        grp_ROUND_6_fu_436_C = 8'd150;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state55))) begin
        grp_ROUND_6_fu_436_C = 8'd165;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state54))) begin
        grp_ROUND_6_fu_436_C = 8'd180;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state53))) begin
        grp_ROUND_6_fu_436_C = 8'd195;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state52))) begin
        grp_ROUND_6_fu_436_C = 8'd210;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state51))) begin
        grp_ROUND_6_fu_436_C = 8'd225;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_ROUND_6_fu_436_C = 8'd240;
    end else begin
        grp_ROUND_6_fu_436_C = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_ROUND_6_fu_436_s_0_read = s_0_47_reg_1586;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_ROUND_6_fu_436_s_0_read = s_0_40_reg_1504;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_ROUND_6_fu_436_s_0_read = s_0_33_reg_1424;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_ROUND_6_fu_436_s_0_read = s_0_26_reg_1409;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_ROUND_6_fu_436_s_0_read = s_0_19_reg_1404;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_ROUND_6_fu_436_s_0_read = s_0_12_reg_1399;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 
    == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_ROUND_6_fu_436_s_0_read = reg_485;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_ROUND_6_fu_436_s_0_read = 64'd9241399655273594880;
    end else begin
        grp_ROUND_6_fu_436_s_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_ROUND_6_fu_436_s_1_read = s_1_43_reg_1591;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 
    == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_ROUND_6_fu_436_s_1_read = reg_490;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_ROUND_6_fu_436_s_1_read = K0_reg_1293;
    end else begin
        grp_ROUND_6_fu_436_s_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_ROUND_6_fu_436_s_2_read = s_2_43_reg_1596;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 
    == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_ROUND_6_fu_436_s_2_read = reg_495;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_ROUND_6_fu_436_s_2_read = K1_reg_1336;
    end else begin
        grp_ROUND_6_fu_436_s_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_ROUND_6_fu_436_s_3_read = s_3_14_reg_1389;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state44) | (1'b1 
    == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_ROUND_6_fu_436_s_3_read = reg_500;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_ROUND_6_fu_436_s_3_read = reg_480;
    end else begin
        grp_ROUND_6_fu_436_s_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_ROUND_6_fu_436_s_4_read = s_4_32_reg_1419;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_ROUND_6_fu_436_s_4_read = s_4_13_reg_1394;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 
    == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_ROUND_6_fu_436_s_4_read = reg_505;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_ROUND_6_fu_436_s_4_read = grp_LOADBYTES_1_fu_418_ap_return;
    end else begin
        grp_ROUND_6_fu_436_s_4_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_gmem_ARVALID = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARVALID;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (m_axi_gmem_AWREADY == 1'b1))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) & (m_axi_gmem_BVALID == 1'b1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_gmem_RREADY = grp_LOADBYTES_1_fu_418_m_axi_gmem_RREADY;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        m_axi_gmem_WDATA = xor_ln29_3_reg_1676;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        m_axi_gmem_WDATA = trunc_ln29_26_reg_1671;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        m_axi_gmem_WDATA = trunc_ln29_25_reg_1666;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        m_axi_gmem_WDATA = trunc_ln29_24_reg_1661;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        m_axi_gmem_WDATA = trunc_ln29_23_reg_1656;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        m_axi_gmem_WDATA = trunc_ln29_22_reg_1651;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        m_axi_gmem_WDATA = trunc_ln29_21_reg_1646;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        m_axi_gmem_WDATA = trunc_ln29_20_reg_1641;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        m_axi_gmem_WDATA = xor_ln29_2_reg_1636;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        m_axi_gmem_WDATA = trunc_ln29_19_reg_1631;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        m_axi_gmem_WDATA = trunc_ln29_18_reg_1626;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        m_axi_gmem_WDATA = trunc_ln29_17_reg_1621;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        m_axi_gmem_WDATA = trunc_ln29_16_reg_1616;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        m_axi_gmem_WDATA = trunc_ln29_15_reg_1611;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        m_axi_gmem_WDATA = trunc_ln29_14_reg_1606;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        m_axi_gmem_WDATA = trunc_ln29_13_reg_1601;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        m_axi_gmem_WDATA = xor_ln29_1_reg_1544;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        m_axi_gmem_WDATA = trunc_ln29_12_reg_1539;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        m_axi_gmem_WDATA = trunc_ln29_11_reg_1534;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        m_axi_gmem_WDATA = trunc_ln29_10_reg_1529;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        m_axi_gmem_WDATA = trunc_ln29_s_reg_1524;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        m_axi_gmem_WDATA = trunc_ln29_9_reg_1519;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        m_axi_gmem_WDATA = trunc_ln29_8_reg_1514;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        m_axi_gmem_WDATA = trunc_ln29_7_reg_1509;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        m_axi_gmem_WDATA = xor_ln29_reg_1464;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        m_axi_gmem_WDATA = trunc_ln29_6_reg_1459;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        m_axi_gmem_WDATA = trunc_ln29_5_reg_1454;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        m_axi_gmem_WDATA = trunc_ln29_4_reg_1449;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        m_axi_gmem_WDATA = trunc_ln29_3_reg_1444;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        m_axi_gmem_WDATA = trunc_ln29_2_reg_1439;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        m_axi_gmem_WDATA = trunc_ln29_1_reg_1434;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        m_axi_gmem_WDATA = trunc_ln1_reg_1429;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state77) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state72) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state71) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state70) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state69) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state68) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state67) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state66) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state65) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state64) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state63) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state62) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state61) & (m_axi_gmem_WREADY 
    == 1'b1)) | ((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state59) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state57) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state55) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state54) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state50) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state49) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_WREADY == 1'b1)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((grp_LOADBYTES_1_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (m_axi_gmem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == ap_CS_fsm_state69) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((1'b1 == ap_CS_fsm_state70) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            if (((1'b1 == ap_CS_fsm_state82) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_LOADBYTES_1_fu_418_ap_start = grp_LOADBYTES_1_fu_418_ap_start_reg;

assign m_axi_gmem_ARADDR = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARADDR;

assign m_axi_gmem_ARBURST = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARBURST;

assign m_axi_gmem_ARCACHE = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARCACHE;

assign m_axi_gmem_ARID = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARID;

assign m_axi_gmem_ARLEN = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLEN;

assign m_axi_gmem_ARLOCK = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLOCK;

assign m_axi_gmem_ARPROT = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARPROT;

assign m_axi_gmem_ARQOS = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARQOS;

assign m_axi_gmem_ARREGION = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARREGION;

assign m_axi_gmem_ARSIZE = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARSIZE;

assign m_axi_gmem_ARUSER = grp_LOADBYTES_1_fu_418_m_axi_gmem_ARUSER;

assign m_axi_gmem_AWADDR = c;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd32;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 1'd1;

assign m_axi_gmem_WUSER = 1'd0;

assign s_0_12_fu_588_p2 = (grp_ROUND_6_fu_436_ap_return_0 ^ grp_LOADBYTES_1_fu_418_ap_return);

assign s_0_19_fu_598_p2 = (grp_ROUND_6_fu_436_ap_return_0 ^ grp_LOADBYTES_1_fu_418_ap_return);

assign s_0_26_fu_614_p2 = (xor_ln52_fu_608_p2 ^ 64'd9223372036854775808);

assign s_0_33_fu_686_p2 = (grp_ROUND_6_fu_436_ap_return_0 ^ grp_LOADBYTES_1_fu_418_ap_return);

assign s_0_40_fu_860_p2 = (reg_480 ^ grp_ROUND_6_fu_436_ap_return_0);

assign s_0_47_fu_996_p2 = (xor_ln78_fu_990_p2 ^ 64'd9223372036854775808);

assign s_1_43_fu_1002_p2 = (grp_ROUND_6_fu_436_ap_return_1 ^ K0_reg_1293);

assign s_2_43_fu_1007_p2 = (grp_ROUND_6_fu_436_ap_return_2 ^ K1_reg_1336);

assign s_3_14_fu_578_p2 = (grp_ROUND_6_fu_436_ap_return_3 ^ K0_reg_1293);

assign s_3_fu_1040_p2 = (grp_ROUND_6_fu_436_ap_return_3 ^ K0_reg_1293);

assign s_4_13_fu_583_p2 = (grp_ROUND_6_fu_436_ap_return_4 ^ K1_reg_1336);

assign s_4_32_fu_624_p2 = (grp_ROUND_6_fu_436_ap_return_4 ^ 64'd1);

assign trunc_ln65_10_fu_670_p1 = grp_LOADBYTES_1_fu_418_ap_return[23:0];

assign trunc_ln65_11_fu_674_p1 = grp_ROUND_6_fu_436_ap_return_0[23:0];

assign trunc_ln65_12_fu_678_p1 = grp_LOADBYTES_1_fu_418_ap_return[15:0];

assign trunc_ln65_13_fu_682_p1 = grp_ROUND_6_fu_436_ap_return_0[15:0];

assign trunc_ln65_14_fu_804_p1 = grp_LOADBYTES_1_fu_418_ap_return[7:0];

assign trunc_ln65_15_fu_832_p1 = grp_ROUND_6_fu_436_ap_return_0[7:0];

assign trunc_ln65_16_fu_808_p1 = grp_LOADBYTES_1_fu_418_ap_return[55:0];

assign trunc_ln65_17_fu_836_p1 = grp_ROUND_6_fu_436_ap_return_0[55:0];

assign trunc_ln65_18_fu_812_p1 = grp_LOADBYTES_1_fu_418_ap_return[47:0];

assign trunc_ln65_19_fu_840_p1 = grp_ROUND_6_fu_436_ap_return_0[47:0];

assign trunc_ln65_1_fu_634_p1 = grp_ROUND_6_fu_436_ap_return_0[7:0];

assign trunc_ln65_20_fu_816_p1 = grp_LOADBYTES_1_fu_418_ap_return[39:0];

assign trunc_ln65_21_fu_844_p1 = grp_ROUND_6_fu_436_ap_return_0[39:0];

assign trunc_ln65_22_fu_820_p1 = grp_LOADBYTES_1_fu_418_ap_return[31:0];

assign trunc_ln65_23_fu_848_p1 = grp_ROUND_6_fu_436_ap_return_0[31:0];

assign trunc_ln65_24_fu_824_p1 = grp_LOADBYTES_1_fu_418_ap_return[23:0];

assign trunc_ln65_25_fu_852_p1 = grp_ROUND_6_fu_436_ap_return_0[23:0];

assign trunc_ln65_26_fu_828_p1 = grp_LOADBYTES_1_fu_418_ap_return[15:0];

assign trunc_ln65_27_fu_856_p1 = grp_ROUND_6_fu_436_ap_return_0[15:0];

assign trunc_ln65_2_fu_638_p1 = grp_LOADBYTES_1_fu_418_ap_return[55:0];

assign trunc_ln65_3_fu_642_p1 = grp_ROUND_6_fu_436_ap_return_0[55:0];

assign trunc_ln65_4_fu_646_p1 = grp_LOADBYTES_1_fu_418_ap_return[47:0];

assign trunc_ln65_5_fu_650_p1 = grp_ROUND_6_fu_436_ap_return_0[47:0];

assign trunc_ln65_6_fu_654_p1 = grp_LOADBYTES_1_fu_418_ap_return[39:0];

assign trunc_ln65_7_fu_658_p1 = grp_ROUND_6_fu_436_ap_return_0[39:0];

assign trunc_ln65_8_fu_662_p1 = grp_LOADBYTES_1_fu_418_ap_return[31:0];

assign trunc_ln65_9_fu_666_p1 = grp_ROUND_6_fu_436_ap_return_0[31:0];

assign trunc_ln65_fu_630_p1 = grp_LOADBYTES_1_fu_418_ap_return[7:0];

assign trunc_ln87_10_fu_530_p1 = grp_LOADBYTES_1_fu_418_ap_return[23:0];

assign trunc_ln87_11_fu_1032_p1 = grp_ROUND_6_fu_436_ap_return_3[23:0];

assign trunc_ln87_12_fu_534_p1 = grp_LOADBYTES_1_fu_418_ap_return[15:0];

assign trunc_ln87_13_fu_1036_p1 = grp_ROUND_6_fu_436_ap_return_3[15:0];

assign trunc_ln87_1_fu_1012_p1 = grp_ROUND_6_fu_436_ap_return_3[7:0];

assign trunc_ln87_2_fu_514_p1 = grp_LOADBYTES_1_fu_418_ap_return[55:0];

assign trunc_ln87_3_fu_1016_p1 = grp_ROUND_6_fu_436_ap_return_3[55:0];

assign trunc_ln87_4_fu_518_p1 = grp_LOADBYTES_1_fu_418_ap_return[47:0];

assign trunc_ln87_5_fu_1020_p1 = grp_ROUND_6_fu_436_ap_return_3[47:0];

assign trunc_ln87_6_fu_522_p1 = grp_LOADBYTES_1_fu_418_ap_return[39:0];

assign trunc_ln87_7_fu_1024_p1 = grp_ROUND_6_fu_436_ap_return_3[39:0];

assign trunc_ln87_8_fu_526_p1 = grp_LOADBYTES_1_fu_418_ap_return[31:0];

assign trunc_ln87_9_fu_1028_p1 = grp_ROUND_6_fu_436_ap_return_3[31:0];

assign trunc_ln87_fu_510_p1 = grp_LOADBYTES_1_fu_418_ap_return[7:0];

assign trunc_ln88_10_fu_558_p1 = grp_LOADBYTES_1_fu_418_ap_return[23:0];

assign trunc_ln88_11_fu_1095_p1 = grp_ROUND_6_fu_436_ap_return_4[23:0];

assign trunc_ln88_12_fu_562_p1 = grp_LOADBYTES_1_fu_418_ap_return[15:0];

assign trunc_ln88_13_fu_1099_p1 = grp_ROUND_6_fu_436_ap_return_4[15:0];

assign trunc_ln88_1_fu_1075_p1 = grp_ROUND_6_fu_436_ap_return_4[7:0];

assign trunc_ln88_2_fu_542_p1 = grp_LOADBYTES_1_fu_418_ap_return[55:0];

assign trunc_ln88_3_fu_1079_p1 = grp_ROUND_6_fu_436_ap_return_4[55:0];

assign trunc_ln88_4_fu_546_p1 = grp_LOADBYTES_1_fu_418_ap_return[47:0];

assign trunc_ln88_5_fu_1083_p1 = grp_ROUND_6_fu_436_ap_return_4[47:0];

assign trunc_ln88_6_fu_550_p1 = grp_LOADBYTES_1_fu_418_ap_return[39:0];

assign trunc_ln88_7_fu_1087_p1 = grp_ROUND_6_fu_436_ap_return_4[39:0];

assign trunc_ln88_8_fu_554_p1 = grp_LOADBYTES_1_fu_418_ap_return[31:0];

assign trunc_ln88_9_fu_1091_p1 = grp_ROUND_6_fu_436_ap_return_4[31:0];

assign trunc_ln88_fu_538_p1 = grp_LOADBYTES_1_fu_418_ap_return[7:0];

assign xor_ln27_1_fu_1113_p2 = (trunc_ln88_11_fu_1095_p1 ^ trunc_ln88_10_reg_1369);

assign xor_ln27_2_fu_1118_p2 = (trunc_ln88_9_fu_1091_p1 ^ trunc_ln88_8_reg_1364);

assign xor_ln27_3_fu_1123_p2 = (trunc_ln88_7_fu_1087_p1 ^ trunc_ln88_6_reg_1359);

assign xor_ln27_4_fu_1128_p2 = (trunc_ln88_5_fu_1083_p1 ^ trunc_ln88_4_reg_1354);

assign xor_ln27_5_fu_1133_p2 = (trunc_ln88_3_fu_1079_p1 ^ trunc_ln88_2_reg_1349);

assign xor_ln27_fu_1108_p2 = (trunc_ln88_13_fu_1099_p1 ^ trunc_ln88_12_reg_1374);

assign xor_ln29_1_fu_966_p2 = (trunc_ln65_15_fu_832_p1 ^ trunc_ln65_14_reg_1469);

assign xor_ln29_2_fu_1208_p2 = (trunc_ln87_reg_1301 ^ trunc_ln87_1_fu_1012_p1);

assign xor_ln29_3_fu_1283_p2 = (trunc_ln88_reg_1344 ^ trunc_ln88_1_fu_1075_p1);

assign xor_ln29_fu_798_p2 = (trunc_ln65_fu_630_p1 ^ trunc_ln65_1_fu_634_p1);

assign xor_ln52_fu_608_p2 = (grp_ROUND_6_fu_436_ap_return_0 ^ grp_LOADBYTES_1_fu_418_ap_return);

assign xor_ln65_10_fu_881_p2 = (trunc_ln65_21_fu_844_p1 ^ trunc_ln65_20_reg_1484);

assign xor_ln65_11_fu_886_p2 = (trunc_ln65_19_fu_840_p1 ^ trunc_ln65_18_reg_1479);

assign xor_ln65_12_fu_891_p2 = (trunc_ln65_17_fu_836_p1 ^ trunc_ln65_16_reg_1474);

assign xor_ln65_1_fu_692_p2 = (trunc_ln65_13_fu_682_p1 ^ trunc_ln65_12_fu_678_p1);

assign xor_ln65_2_fu_698_p2 = (trunc_ln65_11_fu_674_p1 ^ trunc_ln65_10_fu_670_p1);

assign xor_ln65_3_fu_704_p2 = (trunc_ln65_9_fu_666_p1 ^ trunc_ln65_8_fu_662_p1);

assign xor_ln65_4_fu_710_p2 = (trunc_ln65_7_fu_658_p1 ^ trunc_ln65_6_fu_654_p1);

assign xor_ln65_5_fu_716_p2 = (trunc_ln65_5_fu_650_p1 ^ trunc_ln65_4_fu_646_p1);

assign xor_ln65_6_fu_722_p2 = (trunc_ln65_3_fu_642_p1 ^ trunc_ln65_2_fu_638_p1);

assign xor_ln65_7_fu_866_p2 = (trunc_ln65_27_fu_856_p1 ^ trunc_ln65_26_reg_1499);

assign xor_ln65_8_fu_871_p2 = (trunc_ln65_25_fu_852_p1 ^ trunc_ln65_24_reg_1494);

assign xor_ln65_9_fu_876_p2 = (trunc_ln65_23_fu_848_p1 ^ trunc_ln65_22_reg_1489);

assign xor_ln78_fu_990_p2 = (reg_480 ^ grp_ROUND_6_fu_436_ap_return_0);

assign xor_ln87_1_fu_1045_p2 = (trunc_ln87_13_fu_1036_p1 ^ trunc_ln87_12_reg_1331);

assign xor_ln87_2_fu_1050_p2 = (trunc_ln87_11_fu_1032_p1 ^ trunc_ln87_10_reg_1326);

assign xor_ln87_3_fu_1055_p2 = (trunc_ln87_9_fu_1028_p1 ^ trunc_ln87_8_reg_1321);

assign xor_ln87_4_fu_1060_p2 = (trunc_ln87_7_fu_1024_p1 ^ trunc_ln87_6_reg_1316);

assign xor_ln87_5_fu_1065_p2 = (trunc_ln87_5_fu_1020_p1 ^ trunc_ln87_4_reg_1311);

assign xor_ln87_6_fu_1070_p2 = (trunc_ln87_3_fu_1016_p1 ^ trunc_ln87_2_reg_1306);

assign xor_ln88_fu_1103_p2 = (grp_ROUND_6_fu_436_ap_return_4 ^ K1_reg_1336);

endmodule //axi_encrypt_crypto_aead_encrypt_1
