-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_encrypt_crypto_aead_encrypt_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    c : IN STD_LOGIC_VECTOR (63 downto 0);
    m : IN STD_LOGIC_VECTOR (63 downto 0);
    ad : IN STD_LOGIC_VECTOR (63 downto 0);
    npub : IN STD_LOGIC_VECTOR (63 downto 0);
    k : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of axi_encrypt_crypto_aead_encrypt_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (81 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (81 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (81 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (81 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (81 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (81 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (81 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (81 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (81 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (81 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv64_80400C0600000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000001000000000011000000011000000000000000000000000000000000";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv8_D2 : STD_LOGIC_VECTOR (7 downto 0) := "11010010";
    constant ap_const_lv8_C3 : STD_LOGIC_VECTOR (7 downto 0) := "11000011";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv8_A5 : STD_LOGIC_VECTOR (7 downto 0) := "10100101";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv8_69 : STD_LOGIC_VECTOR (7 downto 0) := "01101001";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_4B : STD_LOGIC_VECTOR (7 downto 0) := "01001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_LOADBYTES_1_fu_418_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal reg_485 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_LOADBYTES_1_fu_418_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal reg_490 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal reg_495 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_505 : STD_LOGIC_VECTOR (63 downto 0);
    signal K0_reg_1293 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln87_fu_510_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln87_reg_1301 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln87_2_fu_514_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln87_2_reg_1306 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln87_4_fu_518_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln87_4_reg_1311 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln87_6_fu_522_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln87_6_reg_1316 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln87_8_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln87_8_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln87_10_fu_530_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln87_10_reg_1326 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln87_12_fu_534_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln87_12_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal K1_reg_1336 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln88_fu_538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln88_reg_1344 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln88_2_fu_542_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln88_2_reg_1349 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln88_4_fu_546_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln88_4_reg_1354 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln88_6_fu_550_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln88_6_reg_1359 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln88_8_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln88_8_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln88_10_fu_558_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln88_10_reg_1369 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln88_12_fu_562_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln88_12_reg_1374 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal s_3_14_fu_578_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_3_14_reg_1389 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_4_13_fu_583_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_4_13_reg_1394 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_12_fu_588_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_12_reg_1399 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_19_fu_598_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_19_reg_1404 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_26_fu_614_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_26_reg_1409 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_4_32_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_4_32_reg_1419 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_33_fu_686_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_33_reg_1424 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_reg_1429 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_reg_1434 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_reg_1439 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_reg_1444 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_4_reg_1449 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_5_reg_1454 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_6_reg_1459 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln29_fu_798_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln29_reg_1464 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_14_fu_804_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_14_reg_1469 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_16_fu_808_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln65_16_reg_1474 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln65_18_fu_812_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln65_18_reg_1479 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln65_20_fu_816_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln65_20_reg_1484 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln65_22_fu_820_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_22_reg_1489 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_24_fu_824_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln65_24_reg_1494 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln65_26_fu_828_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_26_reg_1499 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_0_40_fu_860_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_40_reg_1504 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln29_7_reg_1509 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_8_reg_1514 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_9_reg_1519 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_s_reg_1524 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_10_reg_1529 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_11_reg_1534 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_12_reg_1539 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln29_1_fu_966_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln29_1_reg_1544 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_0_47_fu_996_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_47_reg_1586 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_43_fu_1002_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_43_reg_1591 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_43_fu_1007_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_43_reg_1596 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln29_13_reg_1601 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_14_reg_1606 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_15_reg_1611 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_16_reg_1616 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_17_reg_1621 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_18_reg_1626 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_19_reg_1631 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln29_2_fu_1208_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln29_2_reg_1636 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_20_reg_1641 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_21_reg_1646 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_22_reg_1651 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_23_reg_1656 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_24_reg_1661 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_25_reg_1666 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_26_reg_1671 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln29_3_fu_1283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln29_3_reg_1676 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_LOADBYTES_1_fu_418_ap_start : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_418_ap_idle : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_418_ap_ready : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_418_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_418_bytes : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_LOADBYTES_1_fu_418_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_418_idx : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ROUND_6_fu_436_ap_ready : STD_LOGIC;
    signal grp_ROUND_6_fu_436_s_0_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_6_fu_436_s_1_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_6_fu_436_s_2_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_6_fu_436_s_3_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_6_fu_436_s_4_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_6_fu_436_C : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ROUND_6_fu_436_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_6_fu_436_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_6_fu_436_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_6_fu_436_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_6_fu_436_ap_return_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_LOADBYTES_1_fu_418_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal xor_ln52_fu_608_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln65_13_fu_682_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_12_fu_678_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_11_fu_674_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln65_10_fu_670_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln65_9_fu_666_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_8_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_7_fu_658_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln65_6_fu_654_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln65_5_fu_650_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln65_4_fu_646_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln65_3_fu_642_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln65_2_fu_638_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal xor_ln65_6_fu_722_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal xor_ln65_5_fu_716_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln65_4_fu_710_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal xor_ln65_3_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln65_2_fu_698_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln65_1_fu_692_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_1_fu_634_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_fu_630_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_27_fu_856_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_25_fu_852_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln65_23_fu_848_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_21_fu_844_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln65_19_fu_840_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln65_17_fu_836_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal xor_ln65_12_fu_891_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal xor_ln65_11_fu_886_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln65_10_fu_881_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal xor_ln65_9_fu_876_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln65_8_fu_871_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln65_7_fu_866_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_15_fu_832_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln78_fu_990_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln87_13_fu_1036_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln87_11_fu_1032_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln87_9_fu_1028_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln87_7_fu_1024_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln87_5_fu_1020_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln87_3_fu_1016_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln88_13_fu_1099_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln88_11_fu_1095_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln88_9_fu_1091_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln88_7_fu_1087_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln88_5_fu_1083_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln88_3_fu_1079_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal s_3_fu_1040_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln87_6_fu_1070_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal xor_ln87_5_fu_1065_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln87_4_fu_1060_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal xor_ln87_3_fu_1055_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln87_2_fu_1050_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln87_1_fu_1045_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln87_1_fu_1012_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln88_fu_1103_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln27_5_fu_1133_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal xor_ln27_4_fu_1128_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln27_3_fu_1123_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal xor_ln27_2_fu_1118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln27_1_fu_1113_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln27_fu_1108_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln88_1_fu_1075_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (81 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component axi_encrypt_LOADBYTES_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bytes : IN STD_LOGIC_VECTOR (63 downto 0);
        n : IN STD_LOGIC_VECTOR (3 downto 0);
        idx : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component axi_encrypt_ROUND_6 IS
    port (
        ap_ready : OUT STD_LOGIC;
        s_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_4_read : IN STD_LOGIC_VECTOR (63 downto 0);
        C : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_LOADBYTES_1_fu_418 : component axi_encrypt_LOADBYTES_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_LOADBYTES_1_fu_418_ap_start,
        ap_done => grp_LOADBYTES_1_fu_418_ap_done,
        ap_idle => grp_LOADBYTES_1_fu_418_ap_idle,
        ap_ready => grp_LOADBYTES_1_fu_418_ap_ready,
        m_axi_gmem_AWVALID => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_LOADBYTES_1_fu_418_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_LOADBYTES_1_fu_418_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_LOADBYTES_1_fu_418_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_LOADBYTES_1_fu_418_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_LOADBYTES_1_fu_418_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_LOADBYTES_1_fu_418_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_LOADBYTES_1_fu_418_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_LOADBYTES_1_fu_418_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => grp_LOADBYTES_1_fu_418_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_LOADBYTES_1_fu_418_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        bytes => grp_LOADBYTES_1_fu_418_bytes,
        n => grp_LOADBYTES_1_fu_418_n,
        idx => grp_LOADBYTES_1_fu_418_idx,
        ap_return => grp_LOADBYTES_1_fu_418_ap_return);

    grp_ROUND_6_fu_436 : component axi_encrypt_ROUND_6
    port map (
        ap_ready => grp_ROUND_6_fu_436_ap_ready,
        s_0_read => grp_ROUND_6_fu_436_s_0_read,
        s_1_read => grp_ROUND_6_fu_436_s_1_read,
        s_2_read => grp_ROUND_6_fu_436_s_2_read,
        s_3_read => grp_ROUND_6_fu_436_s_3_read,
        s_4_read => grp_ROUND_6_fu_436_s_4_read,
        C => grp_ROUND_6_fu_436_C,
        ap_return_0 => grp_ROUND_6_fu_436_ap_return_0,
        ap_return_1 => grp_ROUND_6_fu_436_ap_return_1,
        ap_return_2 => grp_ROUND_6_fu_436_ap_return_2,
        ap_return_3 => grp_ROUND_6_fu_436_ap_return_3,
        ap_return_4 => grp_ROUND_6_fu_436_ap_return_4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_LOADBYTES_1_fu_418_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_LOADBYTES_1_fu_418_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_LOADBYTES_1_fu_418_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_LOADBYTES_1_fu_418_ap_ready = ap_const_logic_1)) then 
                    grp_LOADBYTES_1_fu_418_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                K0_reg_1293 <= grp_LOADBYTES_1_fu_418_ap_return;
                trunc_ln87_10_reg_1326 <= trunc_ln87_10_fu_530_p1;
                trunc_ln87_12_reg_1331 <= trunc_ln87_12_fu_534_p1;
                trunc_ln87_2_reg_1306 <= trunc_ln87_2_fu_514_p1;
                trunc_ln87_4_reg_1311 <= trunc_ln87_4_fu_518_p1;
                trunc_ln87_6_reg_1316 <= trunc_ln87_6_fu_522_p1;
                trunc_ln87_8_reg_1321 <= trunc_ln87_8_fu_526_p1;
                trunc_ln87_reg_1301 <= trunc_ln87_fu_510_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                K1_reg_1336 <= grp_LOADBYTES_1_fu_418_ap_return;
                trunc_ln88_10_reg_1369 <= trunc_ln88_10_fu_558_p1;
                trunc_ln88_12_reg_1374 <= trunc_ln88_12_fu_562_p1;
                trunc_ln88_2_reg_1349 <= trunc_ln88_2_fu_542_p1;
                trunc_ln88_4_reg_1354 <= trunc_ln88_4_fu_546_p1;
                trunc_ln88_6_reg_1359 <= trunc_ln88_6_fu_550_p1;
                trunc_ln88_8_reg_1364 <= trunc_ln88_8_fu_554_p1;
                trunc_ln88_reg_1344 <= trunc_ln88_fu_538_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_480 <= grp_LOADBYTES_1_fu_418_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 
    = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 
    = ap_CS_fsm_state54) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_gmem_AWREADY = ap_const_logic_1)))) then
                reg_485 <= grp_ROUND_6_fu_436_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 
    = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 
    = ap_CS_fsm_state59) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (m_axi_gmem_WREADY = ap_const_logic_1)) or 
    ((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_gmem_AWREADY = ap_const_logic_1)))) then
                reg_490 <= grp_ROUND_6_fu_436_ap_return_1;
                reg_495 <= grp_ROUND_6_fu_436_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 
    = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 
    = ap_CS_fsm_state58) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (m_axi_gmem_WREADY = ap_const_logic_1)) or 
    ((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_gmem_AWREADY = ap_const_logic_1)))) then
                reg_500 <= grp_ROUND_6_fu_436_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 
    = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state57) 
    and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = 
    ap_CS_fsm_state45) and (m_axi_gmem_AWREADY = ap_const_logic_1)))) then
                reg_505 <= grp_ROUND_6_fu_436_ap_return_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                s_0_12_reg_1399 <= s_0_12_fu_588_p2;
                s_3_14_reg_1389 <= s_3_14_fu_578_p2;
                s_4_13_reg_1394 <= s_4_13_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                s_0_19_reg_1404 <= s_0_19_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                s_0_26_reg_1409 <= s_0_26_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                s_0_33_reg_1424 <= s_0_33_fu_686_p2;
                s_4_32_reg_1419 <= s_4_32_fu_624_p2;
                trunc_ln1_reg_1429 <= s_0_33_fu_686_p2(63 downto 56);
                trunc_ln29_1_reg_1434 <= xor_ln65_6_fu_722_p2(55 downto 48);
                trunc_ln29_2_reg_1439 <= xor_ln65_5_fu_716_p2(47 downto 40);
                trunc_ln29_3_reg_1444 <= xor_ln65_4_fu_710_p2(39 downto 32);
                trunc_ln29_4_reg_1449 <= xor_ln65_3_fu_704_p2(31 downto 24);
                trunc_ln29_5_reg_1454 <= xor_ln65_2_fu_698_p2(23 downto 16);
                trunc_ln29_6_reg_1459 <= xor_ln65_1_fu_692_p2(15 downto 8);
                xor_ln29_reg_1464 <= xor_ln29_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                s_0_40_reg_1504 <= s_0_40_fu_860_p2;
                trunc_ln29_10_reg_1529 <= xor_ln65_9_fu_876_p2(31 downto 24);
                trunc_ln29_11_reg_1534 <= xor_ln65_8_fu_871_p2(23 downto 16);
                trunc_ln29_12_reg_1539 <= xor_ln65_7_fu_866_p2(15 downto 8);
                trunc_ln29_7_reg_1509 <= s_0_40_fu_860_p2(63 downto 56);
                trunc_ln29_8_reg_1514 <= xor_ln65_12_fu_891_p2(55 downto 48);
                trunc_ln29_9_reg_1519 <= xor_ln65_11_fu_886_p2(47 downto 40);
                trunc_ln29_s_reg_1524 <= xor_ln65_10_fu_881_p2(39 downto 32);
                xor_ln29_1_reg_1544 <= xor_ln29_1_fu_966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                s_0_47_reg_1586 <= s_0_47_fu_996_p2;
                s_1_43_reg_1591 <= s_1_43_fu_1002_p2;
                s_2_43_reg_1596 <= s_2_43_fu_1007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                trunc_ln29_13_reg_1601 <= s_3_fu_1040_p2(63 downto 56);
                trunc_ln29_14_reg_1606 <= xor_ln87_6_fu_1070_p2(55 downto 48);
                trunc_ln29_15_reg_1611 <= xor_ln87_5_fu_1065_p2(47 downto 40);
                trunc_ln29_16_reg_1616 <= xor_ln87_4_fu_1060_p2(39 downto 32);
                trunc_ln29_17_reg_1621 <= xor_ln87_3_fu_1055_p2(31 downto 24);
                trunc_ln29_18_reg_1626 <= xor_ln87_2_fu_1050_p2(23 downto 16);
                trunc_ln29_19_reg_1631 <= xor_ln87_1_fu_1045_p2(15 downto 8);
                trunc_ln29_20_reg_1641 <= xor_ln88_fu_1103_p2(63 downto 56);
                trunc_ln29_21_reg_1646 <= xor_ln27_5_fu_1133_p2(55 downto 48);
                trunc_ln29_22_reg_1651 <= xor_ln27_4_fu_1128_p2(47 downto 40);
                trunc_ln29_23_reg_1656 <= xor_ln27_3_fu_1123_p2(39 downto 32);
                trunc_ln29_24_reg_1661 <= xor_ln27_2_fu_1118_p2(31 downto 24);
                trunc_ln29_25_reg_1666 <= xor_ln27_1_fu_1113_p2(23 downto 16);
                trunc_ln29_26_reg_1671 <= xor_ln27_fu_1108_p2(15 downto 8);
                xor_ln29_2_reg_1636 <= xor_ln29_2_fu_1208_p2;
                xor_ln29_3_reg_1676 <= xor_ln29_3_fu_1283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                trunc_ln65_14_reg_1469 <= trunc_ln65_14_fu_804_p1;
                trunc_ln65_16_reg_1474 <= trunc_ln65_16_fu_808_p1;
                trunc_ln65_18_reg_1479 <= trunc_ln65_18_fu_812_p1;
                trunc_ln65_20_reg_1484 <= trunc_ln65_20_fu_816_p1;
                trunc_ln65_22_reg_1489 <= trunc_ln65_22_fu_820_p1;
                trunc_ln65_24_reg_1494 <= trunc_ln65_24_fu_824_p1;
                trunc_ln65_26_reg_1499 <= trunc_ln65_26_fu_828_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_BVALID, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state82, ap_CS_fsm_state6, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, grp_LOADBYTES_1_fu_418_ap_done, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state75) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;

    ap_ST_fsm_state31_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;

    ap_ST_fsm_state37_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;

    ap_ST_fsm_state42_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state42_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state42_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state43_blk <= ap_const_logic_0;

    ap_ST_fsm_state44_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state45_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state46_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state47_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state48_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state48_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state48_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state49_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state49_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state49_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state50_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state51_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state51_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state51_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state52_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state52_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state52_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state53_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state53_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state53_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state54_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state54_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state54_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state55_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state55_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state55_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state56_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state56_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state56_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state57_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state57_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state57_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state58_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state59_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state59_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state59_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state60_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state60_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state60_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state61_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state61_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state61_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state62_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state62_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state62_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state63_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state63_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state63_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state64_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state64_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state64_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state65_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state66_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state66_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state66_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state67_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state67_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state67_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state68_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state68_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state68_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state69_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state69_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state69_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state70_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state70_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state70_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state71_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state71_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state71_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state72_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state72_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state72_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state73_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state74_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state75_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state75_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state75_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state76_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state77_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state77_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state77_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;

    ap_ST_fsm_state82_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(grp_LOADBYTES_1_fu_418_ap_done)
    begin
        if ((grp_LOADBYTES_1_fu_418_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem_BVALID, ap_CS_fsm_state82)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_gmem_BVALID = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 
    = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_LOADBYTES_1_fu_418_ap_start <= grp_LOADBYTES_1_fu_418_ap_start_reg;

    grp_LOADBYTES_1_fu_418_bytes_assign_proc : process(m, ad, npub, k, ap_CS_fsm_state6, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            grp_LOADBYTES_1_fu_418_bytes <= m;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_LOADBYTES_1_fu_418_bytes <= ad;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_LOADBYTES_1_fu_418_bytes <= npub;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_LOADBYTES_1_fu_418_bytes <= k;
        else 
            grp_LOADBYTES_1_fu_418_bytes <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_LOADBYTES_1_fu_418_idx_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            grp_LOADBYTES_1_fu_418_idx <= ap_const_lv5_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            grp_LOADBYTES_1_fu_418_idx <= ap_const_lv5_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_LOADBYTES_1_fu_418_idx <= ap_const_lv5_0;
        else 
            grp_LOADBYTES_1_fu_418_idx <= "XXXXX";
        end if; 
    end process;


    grp_LOADBYTES_1_fu_418_n_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            grp_LOADBYTES_1_fu_418_n <= ap_const_lv4_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_LOADBYTES_1_fu_418_n <= ap_const_lv4_8;
        else 
            grp_LOADBYTES_1_fu_418_n <= "XXXX";
        end if; 
    end process;


    grp_ROUND_6_fu_436_C_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_4B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_5A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_69;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_78;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_87;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_96;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_A5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_B4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_C3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_D2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_E1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_ROUND_6_fu_436_C <= ap_const_lv8_F0;
        else 
            grp_ROUND_6_fu_436_C <= "XXXXXXXX";
        end if; 
    end process;


    grp_ROUND_6_fu_436_s_0_read_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state42, ap_CS_fsm_state44, reg_485, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state43, s_0_12_reg_1399, s_0_19_reg_1404, s_0_26_reg_1409, s_0_33_reg_1424, s_0_40_reg_1504, s_0_47_reg_1586)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_ROUND_6_fu_436_s_0_read <= s_0_47_reg_1586;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_ROUND_6_fu_436_s_0_read <= s_0_40_reg_1504;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_ROUND_6_fu_436_s_0_read <= s_0_33_reg_1424;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_ROUND_6_fu_436_s_0_read <= s_0_26_reg_1409;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_ROUND_6_fu_436_s_0_read <= s_0_19_reg_1404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_ROUND_6_fu_436_s_0_read <= s_0_12_reg_1399;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 
    = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_ROUND_6_fu_436_s_0_read <= reg_485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_ROUND_6_fu_436_s_0_read <= ap_const_lv64_80400C0600000000;
        else 
            grp_ROUND_6_fu_436_s_0_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_ROUND_6_fu_436_s_1_read_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, reg_490, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state43, K0_reg_1293, s_1_43_reg_1591)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_ROUND_6_fu_436_s_1_read <= s_1_43_reg_1591;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 
    = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) 
    or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_ROUND_6_fu_436_s_1_read <= reg_490;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_ROUND_6_fu_436_s_1_read <= K0_reg_1293;
        else 
            grp_ROUND_6_fu_436_s_1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_ROUND_6_fu_436_s_2_read_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state43, reg_495, K1_reg_1336, s_2_43_reg_1596)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_ROUND_6_fu_436_s_2_read <= s_2_43_reg_1596;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 
    = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) 
    or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_ROUND_6_fu_436_s_2_read <= reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_ROUND_6_fu_436_s_2_read <= K1_reg_1336;
        else 
            grp_ROUND_6_fu_436_s_2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_ROUND_6_fu_436_s_3_read_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, reg_480, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state43, reg_500, s_3_14_reg_1389)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_ROUND_6_fu_436_s_3_read <= s_3_14_reg_1389;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 
    = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) 
    or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_ROUND_6_fu_436_s_3_read <= reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_ROUND_6_fu_436_s_3_read <= reg_480;
        else 
            grp_ROUND_6_fu_436_s_3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_ROUND_6_fu_436_s_4_read_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, grp_LOADBYTES_1_fu_418_ap_return, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state43, reg_505, s_4_13_reg_1394, s_4_32_reg_1419)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_ROUND_6_fu_436_s_4_read <= s_4_32_reg_1419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_ROUND_6_fu_436_s_4_read <= s_4_13_reg_1394;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 
    = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) 
    or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_ROUND_6_fu_436_s_4_read <= reg_505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_ROUND_6_fu_436_s_4_read <= grp_LOADBYTES_1_fu_418_ap_return;
        else 
            grp_ROUND_6_fu_436_s_4_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARADDR <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARUSER;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state41, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state43, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_LOADBYTES_1_fu_418_m_axi_gmem_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem_ARVALID <= grp_LOADBYTES_1_fu_418_m_axi_gmem_ARVALID;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= c;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_20;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state41, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state43, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_LOADBYTES_1_fu_418_m_axi_gmem_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem_RREADY <= grp_LOADBYTES_1_fu_418_m_axi_gmem_RREADY;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_WDATA_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, trunc_ln1_reg_1429, trunc_ln29_1_reg_1434, trunc_ln29_2_reg_1439, trunc_ln29_3_reg_1444, trunc_ln29_4_reg_1449, trunc_ln29_5_reg_1454, trunc_ln29_6_reg_1459, xor_ln29_reg_1464, trunc_ln29_7_reg_1509, trunc_ln29_8_reg_1514, trunc_ln29_9_reg_1519, trunc_ln29_s_reg_1524, trunc_ln29_10_reg_1529, trunc_ln29_11_reg_1534, trunc_ln29_12_reg_1539, xor_ln29_1_reg_1544, trunc_ln29_13_reg_1601, trunc_ln29_14_reg_1606, trunc_ln29_15_reg_1611, trunc_ln29_16_reg_1616, trunc_ln29_17_reg_1621, trunc_ln29_18_reg_1626, trunc_ln29_19_reg_1631, xor_ln29_2_reg_1636, trunc_ln29_20_reg_1641, trunc_ln29_21_reg_1646, trunc_ln29_22_reg_1651, trunc_ln29_23_reg_1656, trunc_ln29_24_reg_1661, trunc_ln29_25_reg_1666, trunc_ln29_26_reg_1671, xor_ln29_3_reg_1676)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            m_axi_gmem_WDATA <= xor_ln29_3_reg_1676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            m_axi_gmem_WDATA <= trunc_ln29_26_reg_1671;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            m_axi_gmem_WDATA <= trunc_ln29_25_reg_1666;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            m_axi_gmem_WDATA <= trunc_ln29_24_reg_1661;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            m_axi_gmem_WDATA <= trunc_ln29_23_reg_1656;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            m_axi_gmem_WDATA <= trunc_ln29_22_reg_1651;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            m_axi_gmem_WDATA <= trunc_ln29_21_reg_1646;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            m_axi_gmem_WDATA <= trunc_ln29_20_reg_1641;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            m_axi_gmem_WDATA <= xor_ln29_2_reg_1636;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            m_axi_gmem_WDATA <= trunc_ln29_19_reg_1631;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            m_axi_gmem_WDATA <= trunc_ln29_18_reg_1626;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            m_axi_gmem_WDATA <= trunc_ln29_17_reg_1621;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            m_axi_gmem_WDATA <= trunc_ln29_16_reg_1616;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            m_axi_gmem_WDATA <= trunc_ln29_15_reg_1611;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            m_axi_gmem_WDATA <= trunc_ln29_14_reg_1606;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            m_axi_gmem_WDATA <= trunc_ln29_13_reg_1601;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            m_axi_gmem_WDATA <= xor_ln29_1_reg_1544;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            m_axi_gmem_WDATA <= trunc_ln29_12_reg_1539;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            m_axi_gmem_WDATA <= trunc_ln29_11_reg_1534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            m_axi_gmem_WDATA <= trunc_ln29_10_reg_1529;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            m_axi_gmem_WDATA <= trunc_ln29_s_reg_1524;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            m_axi_gmem_WDATA <= trunc_ln29_9_reg_1519;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            m_axi_gmem_WDATA <= trunc_ln29_8_reg_1514;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            m_axi_gmem_WDATA <= trunc_ln29_7_reg_1509;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            m_axi_gmem_WDATA <= xor_ln29_reg_1464;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            m_axi_gmem_WDATA <= trunc_ln29_6_reg_1459;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            m_axi_gmem_WDATA <= trunc_ln29_5_reg_1454;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            m_axi_gmem_WDATA <= trunc_ln29_4_reg_1449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            m_axi_gmem_WDATA <= trunc_ln29_3_reg_1444;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            m_axi_gmem_WDATA <= trunc_ln29_2_reg_1439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            m_axi_gmem_WDATA <= trunc_ln29_1_reg_1434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            m_axi_gmem_WDATA <= trunc_ln1_reg_1429;
        else 
            m_axi_gmem_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv1_1;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state77) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state76) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state75) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state74) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state71) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state68) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state67) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (m_axi_gmem_WREADY = ap_const_logic_1)) 
    or ((ap_const_logic_1 = ap_CS_fsm_state65) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state62) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (m_axi_gmem_WREADY = 
    ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (m_axi_gmem_WREADY = ap_const_logic_1)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    s_0_12_fu_588_p2 <= (grp_ROUND_6_fu_436_ap_return_0 xor grp_LOADBYTES_1_fu_418_ap_return);
    s_0_19_fu_598_p2 <= (grp_ROUND_6_fu_436_ap_return_0 xor grp_LOADBYTES_1_fu_418_ap_return);
    s_0_26_fu_614_p2 <= (xor_ln52_fu_608_p2 xor ap_const_lv64_8000000000000000);
    s_0_33_fu_686_p2 <= (grp_ROUND_6_fu_436_ap_return_0 xor grp_LOADBYTES_1_fu_418_ap_return);
    s_0_40_fu_860_p2 <= (reg_480 xor grp_ROUND_6_fu_436_ap_return_0);
    s_0_47_fu_996_p2 <= (xor_ln78_fu_990_p2 xor ap_const_lv64_8000000000000000);
    s_1_43_fu_1002_p2 <= (grp_ROUND_6_fu_436_ap_return_1 xor K0_reg_1293);
    s_2_43_fu_1007_p2 <= (grp_ROUND_6_fu_436_ap_return_2 xor K1_reg_1336);
    s_3_14_fu_578_p2 <= (grp_ROUND_6_fu_436_ap_return_3 xor K0_reg_1293);
    s_3_fu_1040_p2 <= (grp_ROUND_6_fu_436_ap_return_3 xor K0_reg_1293);
    s_4_13_fu_583_p2 <= (grp_ROUND_6_fu_436_ap_return_4 xor K1_reg_1336);
    s_4_32_fu_624_p2 <= (grp_ROUND_6_fu_436_ap_return_4 xor ap_const_lv64_1);
    trunc_ln65_10_fu_670_p1 <= grp_LOADBYTES_1_fu_418_ap_return(24 - 1 downto 0);
    trunc_ln65_11_fu_674_p1 <= grp_ROUND_6_fu_436_ap_return_0(24 - 1 downto 0);
    trunc_ln65_12_fu_678_p1 <= grp_LOADBYTES_1_fu_418_ap_return(16 - 1 downto 0);
    trunc_ln65_13_fu_682_p1 <= grp_ROUND_6_fu_436_ap_return_0(16 - 1 downto 0);
    trunc_ln65_14_fu_804_p1 <= grp_LOADBYTES_1_fu_418_ap_return(8 - 1 downto 0);
    trunc_ln65_15_fu_832_p1 <= grp_ROUND_6_fu_436_ap_return_0(8 - 1 downto 0);
    trunc_ln65_16_fu_808_p1 <= grp_LOADBYTES_1_fu_418_ap_return(56 - 1 downto 0);
    trunc_ln65_17_fu_836_p1 <= grp_ROUND_6_fu_436_ap_return_0(56 - 1 downto 0);
    trunc_ln65_18_fu_812_p1 <= grp_LOADBYTES_1_fu_418_ap_return(48 - 1 downto 0);
    trunc_ln65_19_fu_840_p1 <= grp_ROUND_6_fu_436_ap_return_0(48 - 1 downto 0);
    trunc_ln65_1_fu_634_p1 <= grp_ROUND_6_fu_436_ap_return_0(8 - 1 downto 0);
    trunc_ln65_20_fu_816_p1 <= grp_LOADBYTES_1_fu_418_ap_return(40 - 1 downto 0);
    trunc_ln65_21_fu_844_p1 <= grp_ROUND_6_fu_436_ap_return_0(40 - 1 downto 0);
    trunc_ln65_22_fu_820_p1 <= grp_LOADBYTES_1_fu_418_ap_return(32 - 1 downto 0);
    trunc_ln65_23_fu_848_p1 <= grp_ROUND_6_fu_436_ap_return_0(32 - 1 downto 0);
    trunc_ln65_24_fu_824_p1 <= grp_LOADBYTES_1_fu_418_ap_return(24 - 1 downto 0);
    trunc_ln65_25_fu_852_p1 <= grp_ROUND_6_fu_436_ap_return_0(24 - 1 downto 0);
    trunc_ln65_26_fu_828_p1 <= grp_LOADBYTES_1_fu_418_ap_return(16 - 1 downto 0);
    trunc_ln65_27_fu_856_p1 <= grp_ROUND_6_fu_436_ap_return_0(16 - 1 downto 0);
    trunc_ln65_2_fu_638_p1 <= grp_LOADBYTES_1_fu_418_ap_return(56 - 1 downto 0);
    trunc_ln65_3_fu_642_p1 <= grp_ROUND_6_fu_436_ap_return_0(56 - 1 downto 0);
    trunc_ln65_4_fu_646_p1 <= grp_LOADBYTES_1_fu_418_ap_return(48 - 1 downto 0);
    trunc_ln65_5_fu_650_p1 <= grp_ROUND_6_fu_436_ap_return_0(48 - 1 downto 0);
    trunc_ln65_6_fu_654_p1 <= grp_LOADBYTES_1_fu_418_ap_return(40 - 1 downto 0);
    trunc_ln65_7_fu_658_p1 <= grp_ROUND_6_fu_436_ap_return_0(40 - 1 downto 0);
    trunc_ln65_8_fu_662_p1 <= grp_LOADBYTES_1_fu_418_ap_return(32 - 1 downto 0);
    trunc_ln65_9_fu_666_p1 <= grp_ROUND_6_fu_436_ap_return_0(32 - 1 downto 0);
    trunc_ln65_fu_630_p1 <= grp_LOADBYTES_1_fu_418_ap_return(8 - 1 downto 0);
    trunc_ln87_10_fu_530_p1 <= grp_LOADBYTES_1_fu_418_ap_return(24 - 1 downto 0);
    trunc_ln87_11_fu_1032_p1 <= grp_ROUND_6_fu_436_ap_return_3(24 - 1 downto 0);
    trunc_ln87_12_fu_534_p1 <= grp_LOADBYTES_1_fu_418_ap_return(16 - 1 downto 0);
    trunc_ln87_13_fu_1036_p1 <= grp_ROUND_6_fu_436_ap_return_3(16 - 1 downto 0);
    trunc_ln87_1_fu_1012_p1 <= grp_ROUND_6_fu_436_ap_return_3(8 - 1 downto 0);
    trunc_ln87_2_fu_514_p1 <= grp_LOADBYTES_1_fu_418_ap_return(56 - 1 downto 0);
    trunc_ln87_3_fu_1016_p1 <= grp_ROUND_6_fu_436_ap_return_3(56 - 1 downto 0);
    trunc_ln87_4_fu_518_p1 <= grp_LOADBYTES_1_fu_418_ap_return(48 - 1 downto 0);
    trunc_ln87_5_fu_1020_p1 <= grp_ROUND_6_fu_436_ap_return_3(48 - 1 downto 0);
    trunc_ln87_6_fu_522_p1 <= grp_LOADBYTES_1_fu_418_ap_return(40 - 1 downto 0);
    trunc_ln87_7_fu_1024_p1 <= grp_ROUND_6_fu_436_ap_return_3(40 - 1 downto 0);
    trunc_ln87_8_fu_526_p1 <= grp_LOADBYTES_1_fu_418_ap_return(32 - 1 downto 0);
    trunc_ln87_9_fu_1028_p1 <= grp_ROUND_6_fu_436_ap_return_3(32 - 1 downto 0);
    trunc_ln87_fu_510_p1 <= grp_LOADBYTES_1_fu_418_ap_return(8 - 1 downto 0);
    trunc_ln88_10_fu_558_p1 <= grp_LOADBYTES_1_fu_418_ap_return(24 - 1 downto 0);
    trunc_ln88_11_fu_1095_p1 <= grp_ROUND_6_fu_436_ap_return_4(24 - 1 downto 0);
    trunc_ln88_12_fu_562_p1 <= grp_LOADBYTES_1_fu_418_ap_return(16 - 1 downto 0);
    trunc_ln88_13_fu_1099_p1 <= grp_ROUND_6_fu_436_ap_return_4(16 - 1 downto 0);
    trunc_ln88_1_fu_1075_p1 <= grp_ROUND_6_fu_436_ap_return_4(8 - 1 downto 0);
    trunc_ln88_2_fu_542_p1 <= grp_LOADBYTES_1_fu_418_ap_return(56 - 1 downto 0);
    trunc_ln88_3_fu_1079_p1 <= grp_ROUND_6_fu_436_ap_return_4(56 - 1 downto 0);
    trunc_ln88_4_fu_546_p1 <= grp_LOADBYTES_1_fu_418_ap_return(48 - 1 downto 0);
    trunc_ln88_5_fu_1083_p1 <= grp_ROUND_6_fu_436_ap_return_4(48 - 1 downto 0);
    trunc_ln88_6_fu_550_p1 <= grp_LOADBYTES_1_fu_418_ap_return(40 - 1 downto 0);
    trunc_ln88_7_fu_1087_p1 <= grp_ROUND_6_fu_436_ap_return_4(40 - 1 downto 0);
    trunc_ln88_8_fu_554_p1 <= grp_LOADBYTES_1_fu_418_ap_return(32 - 1 downto 0);
    trunc_ln88_9_fu_1091_p1 <= grp_ROUND_6_fu_436_ap_return_4(32 - 1 downto 0);
    trunc_ln88_fu_538_p1 <= grp_LOADBYTES_1_fu_418_ap_return(8 - 1 downto 0);
    xor_ln27_1_fu_1113_p2 <= (trunc_ln88_11_fu_1095_p1 xor trunc_ln88_10_reg_1369);
    xor_ln27_2_fu_1118_p2 <= (trunc_ln88_9_fu_1091_p1 xor trunc_ln88_8_reg_1364);
    xor_ln27_3_fu_1123_p2 <= (trunc_ln88_7_fu_1087_p1 xor trunc_ln88_6_reg_1359);
    xor_ln27_4_fu_1128_p2 <= (trunc_ln88_5_fu_1083_p1 xor trunc_ln88_4_reg_1354);
    xor_ln27_5_fu_1133_p2 <= (trunc_ln88_3_fu_1079_p1 xor trunc_ln88_2_reg_1349);
    xor_ln27_fu_1108_p2 <= (trunc_ln88_13_fu_1099_p1 xor trunc_ln88_12_reg_1374);
    xor_ln29_1_fu_966_p2 <= (trunc_ln65_15_fu_832_p1 xor trunc_ln65_14_reg_1469);
    xor_ln29_2_fu_1208_p2 <= (trunc_ln87_reg_1301 xor trunc_ln87_1_fu_1012_p1);
    xor_ln29_3_fu_1283_p2 <= (trunc_ln88_reg_1344 xor trunc_ln88_1_fu_1075_p1);
    xor_ln29_fu_798_p2 <= (trunc_ln65_fu_630_p1 xor trunc_ln65_1_fu_634_p1);
    xor_ln52_fu_608_p2 <= (grp_ROUND_6_fu_436_ap_return_0 xor grp_LOADBYTES_1_fu_418_ap_return);
    xor_ln65_10_fu_881_p2 <= (trunc_ln65_21_fu_844_p1 xor trunc_ln65_20_reg_1484);
    xor_ln65_11_fu_886_p2 <= (trunc_ln65_19_fu_840_p1 xor trunc_ln65_18_reg_1479);
    xor_ln65_12_fu_891_p2 <= (trunc_ln65_17_fu_836_p1 xor trunc_ln65_16_reg_1474);
    xor_ln65_1_fu_692_p2 <= (trunc_ln65_13_fu_682_p1 xor trunc_ln65_12_fu_678_p1);
    xor_ln65_2_fu_698_p2 <= (trunc_ln65_11_fu_674_p1 xor trunc_ln65_10_fu_670_p1);
    xor_ln65_3_fu_704_p2 <= (trunc_ln65_9_fu_666_p1 xor trunc_ln65_8_fu_662_p1);
    xor_ln65_4_fu_710_p2 <= (trunc_ln65_7_fu_658_p1 xor trunc_ln65_6_fu_654_p1);
    xor_ln65_5_fu_716_p2 <= (trunc_ln65_5_fu_650_p1 xor trunc_ln65_4_fu_646_p1);
    xor_ln65_6_fu_722_p2 <= (trunc_ln65_3_fu_642_p1 xor trunc_ln65_2_fu_638_p1);
    xor_ln65_7_fu_866_p2 <= (trunc_ln65_27_fu_856_p1 xor trunc_ln65_26_reg_1499);
    xor_ln65_8_fu_871_p2 <= (trunc_ln65_25_fu_852_p1 xor trunc_ln65_24_reg_1494);
    xor_ln65_9_fu_876_p2 <= (trunc_ln65_23_fu_848_p1 xor trunc_ln65_22_reg_1489);
    xor_ln78_fu_990_p2 <= (reg_480 xor grp_ROUND_6_fu_436_ap_return_0);
    xor_ln87_1_fu_1045_p2 <= (trunc_ln87_13_fu_1036_p1 xor trunc_ln87_12_reg_1331);
    xor_ln87_2_fu_1050_p2 <= (trunc_ln87_11_fu_1032_p1 xor trunc_ln87_10_reg_1326);
    xor_ln87_3_fu_1055_p2 <= (trunc_ln87_9_fu_1028_p1 xor trunc_ln87_8_reg_1321);
    xor_ln87_4_fu_1060_p2 <= (trunc_ln87_7_fu_1024_p1 xor trunc_ln87_6_reg_1316);
    xor_ln87_5_fu_1065_p2 <= (trunc_ln87_5_fu_1020_p1 xor trunc_ln87_4_reg_1311);
    xor_ln87_6_fu_1070_p2 <= (trunc_ln87_3_fu_1016_p1 xor trunc_ln87_2_reg_1306);
    xor_ln88_fu_1103_p2 <= (grp_ROUND_6_fu_436_ap_return_4 xor K1_reg_1336);
end behav;
