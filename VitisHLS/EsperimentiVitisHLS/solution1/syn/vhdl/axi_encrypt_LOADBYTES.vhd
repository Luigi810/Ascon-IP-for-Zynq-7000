-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_encrypt_LOADBYTES is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bytes_read : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_47 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_48 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_49 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_50 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_51 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_52 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_53 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_54 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_55 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_56 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_57 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_58 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_59 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_60 : IN STD_LOGIC_VECTOR (7 downto 0);
    bytes_read_61 : IN STD_LOGIC_VECTOR (7 downto 0);
    n : IN STD_LOGIC_VECTOR (3 downto 0);
    idx : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of axi_encrypt_LOADBYTES is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln22_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_fu_257_p35 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_395 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln22_fu_337_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln22_reg_400 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_fu_102 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal x_1_fu_363_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_x_load_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_106 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln22_1_fu_237_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln22_fu_243_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln22_2_fu_247_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p33 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_257_p34 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_329_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_1_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln22_fu_357_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_fu_257_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_257_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component axi_encrypt_sparsemux_33_4_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component axi_encrypt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_33_4_8_1_1_U42 : component axi_encrypt_sparsemux_33_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 8,
        CASE1 => "0001",
        din1_WIDTH => 8,
        CASE2 => "0010",
        din2_WIDTH => 8,
        CASE3 => "0011",
        din3_WIDTH => 8,
        CASE4 => "0100",
        din4_WIDTH => 8,
        CASE5 => "0101",
        din5_WIDTH => 8,
        CASE6 => "0110",
        din6_WIDTH => 8,
        CASE7 => "0111",
        din7_WIDTH => 8,
        CASE8 => "1000",
        din8_WIDTH => 8,
        CASE9 => "1001",
        din9_WIDTH => 8,
        CASE10 => "1010",
        din10_WIDTH => 8,
        CASE11 => "1011",
        din11_WIDTH => 8,
        CASE12 => "1100",
        din12_WIDTH => 8,
        CASE13 => "1101",
        din13_WIDTH => 8,
        CASE14 => "1110",
        din14_WIDTH => 8,
        CASE15 => "1111",
        din15_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => bytes_read,
        din1 => bytes_read_47,
        din2 => bytes_read_48,
        din3 => bytes_read_49,
        din4 => bytes_read_50,
        din5 => bytes_read_51,
        din6 => bytes_read_52,
        din7 => bytes_read_53,
        din8 => bytes_read_54,
        din9 => bytes_read_55,
        din10 => bytes_read_56,
        din11 => bytes_read_57,
        din12 => bytes_read_58,
        din13 => bytes_read_59,
        din14 => bytes_read_60,
        din15 => bytes_read_61,
        def => tmp_fu_257_p33,
        sel => tmp_fu_257_p34,
        dout => tmp_fu_257_p35);

    flow_control_loop_pipe_sequential_init_U : component axi_encrypt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln22_fu_231_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_106 <= add_ln22_1_fu_237_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_106 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_102 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    x_fu_102 <= x_1_fu_363_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    sub_ln22_reg_400(5 downto 3) <= sub_ln22_fu_337_p2(5 downto 3);
                tmp_reg_395 <= tmp_fu_257_p35;
            end if;
        end if;
    end process;
    sub_ln22_reg_400(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln22_1_fu_237_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln22_fu_231_p2)
    begin
        if (((icmp_ln22_fu_231_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_sig_allocacmp_x_load_1;

    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_106)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, x_fu_102, x_1_fu_363_p2, ap_block_pp0_stage0, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_x_load_1 <= ap_const_lv64_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_x_load_1 <= x_1_fu_363_p2;
            else 
                ap_sig_allocacmp_x_load_1 <= x_fu_102;
            end if;
        else 
            ap_sig_allocacmp_x_load_1 <= x_fu_102;
        end if; 
    end process;

    icmp_ln22_fu_231_p2 <= "1" when (ap_sig_allocacmp_i_3 = n) else "0";
    shl_ln22_fu_357_p2 <= std_logic_vector(shift_left(unsigned(zext_ln22_fu_351_p1),to_integer(unsigned('0' & zext_ln22_1_fu_354_p1(31-1 downto 0)))));
    shl_ln_fu_329_p3 <= (trunc_ln22_fu_243_p1 & ap_const_lv3_0);
    sub_ln22_fu_337_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(shl_ln_fu_329_p3));
    tmp_fu_257_p33 <= "XXXXXXXX";
    tmp_fu_257_p34 <= std_logic_vector(unsigned(zext_ln22_2_fu_247_p1) + unsigned(idx));
    trunc_ln22_fu_243_p1 <= ap_sig_allocacmp_i_3(3 - 1 downto 0);
    x_1_fu_363_p2 <= (x_fu_102 or shl_ln22_fu_357_p2);
    zext_ln22_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln22_reg_400),64));
    zext_ln22_2_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln22_fu_243_p1),4));
    zext_ln22_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_395),64));
end behav;
