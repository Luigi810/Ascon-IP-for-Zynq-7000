// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module axi_encrypt_LOADBYTES (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bytes_read,
        bytes_read_47,
        bytes_read_48,
        bytes_read_49,
        bytes_read_50,
        bytes_read_51,
        bytes_read_52,
        bytes_read_53,
        bytes_read_54,
        bytes_read_55,
        bytes_read_56,
        bytes_read_57,
        bytes_read_58,
        bytes_read_59,
        bytes_read_60,
        bytes_read_61,
        n,
        idx,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] bytes_read;
input  [7:0] bytes_read_47;
input  [7:0] bytes_read_48;
input  [7:0] bytes_read_49;
input  [7:0] bytes_read_50;
input  [7:0] bytes_read_51;
input  [7:0] bytes_read_52;
input  [7:0] bytes_read_53;
input  [7:0] bytes_read_54;
input  [7:0] bytes_read_55;
input  [7:0] bytes_read_56;
input  [7:0] bytes_read_57;
input  [7:0] bytes_read_58;
input  [7:0] bytes_read_59;
input  [7:0] bytes_read_60;
input  [7:0] bytes_read_61;
input  [3:0] n;
input  [3:0] idx;
output  [63:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln22_fu_231_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] tmp_fu_257_p35;
reg   [7:0] tmp_reg_395;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] sub_ln22_fu_337_p2;
reg   [5:0] sub_ln22_reg_400;
reg   [63:0] x_fu_102;
wire   [63:0] x_1_fu_363_p2;
reg   [63:0] ap_sig_allocacmp_x_load_1;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [3:0] i_fu_106;
wire   [3:0] add_ln22_1_fu_237_p2;
reg   [3:0] ap_sig_allocacmp_i_3;
wire   [2:0] trunc_ln22_fu_243_p1;
wire   [3:0] zext_ln22_2_fu_247_p1;
wire   [7:0] tmp_fu_257_p33;
wire   [3:0] tmp_fu_257_p34;
wire   [5:0] shl_ln_fu_329_p3;
wire   [63:0] zext_ln22_fu_351_p1;
wire   [63:0] zext_ln22_1_fu_354_p1;
wire   [63:0] shl_ln22_fu_357_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [3:0] tmp_fu_257_p1;
wire   [3:0] tmp_fu_257_p3;
wire   [3:0] tmp_fu_257_p5;
wire   [3:0] tmp_fu_257_p7;
wire   [3:0] tmp_fu_257_p9;
wire   [3:0] tmp_fu_257_p11;
wire   [3:0] tmp_fu_257_p13;
wire   [3:0] tmp_fu_257_p15;
wire  signed [3:0] tmp_fu_257_p17;
wire  signed [3:0] tmp_fu_257_p19;
wire  signed [3:0] tmp_fu_257_p21;
wire  signed [3:0] tmp_fu_257_p23;
wire  signed [3:0] tmp_fu_257_p25;
wire  signed [3:0] tmp_fu_257_p27;
wire  signed [3:0] tmp_fu_257_p29;
wire  signed [3:0] tmp_fu_257_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 x_fu_102 = 64'd0;
#0 i_fu_106 = 4'd0;
#0 ap_done_reg = 1'b0;
end

axi_encrypt_sparsemux_33_4_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 8 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 8 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 8 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 8 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 8 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 8 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 8 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
sparsemux_33_4_8_1_1_U42(
    .din0(bytes_read),
    .din1(bytes_read_47),
    .din2(bytes_read_48),
    .din3(bytes_read_49),
    .din4(bytes_read_50),
    .din5(bytes_read_51),
    .din6(bytes_read_52),
    .din7(bytes_read_53),
    .din8(bytes_read_54),
    .din9(bytes_read_55),
    .din10(bytes_read_56),
    .din11(bytes_read_57),
    .din12(bytes_read_58),
    .din13(bytes_read_59),
    .din14(bytes_read_60),
    .din15(bytes_read_61),
    .def(tmp_fu_257_p33),
    .sel(tmp_fu_257_p34),
    .dout(tmp_fu_257_p35)
);

axi_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_231_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_106 <= add_ln22_1_fu_237_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_106 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_102 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x_fu_102 <= x_1_fu_363_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln22_reg_400[5 : 3] <= sub_ln22_fu_337_p2[5 : 3];
        tmp_reg_395 <= tmp_fu_257_p35;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_231_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_x_load_1 = 64'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_x_load_1 = x_1_fu_363_p2;
        end else begin
            ap_sig_allocacmp_x_load_1 = x_fu_102;
        end
    end else begin
        ap_sig_allocacmp_x_load_1 = x_fu_102;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_1_fu_237_p2 = (ap_sig_allocacmp_i_3 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_return = ap_sig_allocacmp_x_load_1;

assign icmp_ln22_fu_231_p2 = ((ap_sig_allocacmp_i_3 == n) ? 1'b1 : 1'b0);

assign shl_ln22_fu_357_p2 = zext_ln22_fu_351_p1 << zext_ln22_1_fu_354_p1;

assign shl_ln_fu_329_p3 = {{trunc_ln22_fu_243_p1}, {3'd0}};

assign sub_ln22_fu_337_p2 = ($signed(6'd56) - $signed(shl_ln_fu_329_p3));

assign tmp_fu_257_p33 = 'bx;

assign tmp_fu_257_p34 = (zext_ln22_2_fu_247_p1 + idx);

assign trunc_ln22_fu_243_p1 = ap_sig_allocacmp_i_3[2:0];

assign x_1_fu_363_p2 = (x_fu_102 | shl_ln22_fu_357_p2);

assign zext_ln22_1_fu_354_p1 = sub_ln22_reg_400;

assign zext_ln22_2_fu_247_p1 = trunc_ln22_fu_243_p1;

assign zext_ln22_fu_351_p1 = tmp_reg_395;

always @ (posedge ap_clk) begin
    sub_ln22_reg_400[2:0] <= 3'b000;
end

endmodule //axi_encrypt_LOADBYTES
