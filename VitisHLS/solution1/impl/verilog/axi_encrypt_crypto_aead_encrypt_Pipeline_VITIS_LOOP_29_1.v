// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module axi_encrypt_crypto_aead_encrypt_Pipeline_VITIS_LOOP_29_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_3_address0,
        c_3_ce0,
        c_3_we0,
        c_3_d0,
        c_2_address0,
        c_2_ce0,
        c_2_we0,
        c_2_d0,
        c_1_address0,
        c_1_ce0,
        c_1_we0,
        c_1_d0,
        c_0_address0,
        c_0_ce0,
        c_0_we0,
        c_0_d0,
        s_0_26,
        idx53
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] c_3_address0;
output   c_3_ce0;
output   c_3_we0;
output  [7:0] c_3_d0;
output  [2:0] c_2_address0;
output   c_2_ce0;
output   c_2_we0;
output  [7:0] c_2_d0;
output  [2:0] c_1_address0;
output   c_1_ce0;
output   c_1_we0;
output  [7:0] c_1_d0;
output  [2:0] c_0_address0;
output   c_0_ce0;
output   c_0_we0;
output  [7:0] c_0_d0;
input  [63:0] s_0_26;
input  [3:0] idx53;

reg ap_idle;
reg c_3_ce0;
reg c_3_we0;
reg c_2_ce0;
reg c_2_we0;
reg c_1_ce0;
reg c_1_we0;
reg c_0_ce0;
reg c_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln29_fu_144_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] trunc_ln29_fu_156_p1;
reg   [1:0] trunc_ln29_reg_251;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] trunc_ln29_6_fu_188_p1;
reg   [7:0] trunc_ln29_6_reg_255;
wire   [0:0] or_ln29_fu_208_p2;
reg   [0:0] or_ln29_reg_263;
reg   [0:0] tmp_2_reg_268;
wire   [63:0] zext_ln29_2_fu_233_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_64;
wire   [3:0] add_ln29_fu_150_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_2;
wire   [2:0] trunc_ln29_5_fu_160_p1;
wire   [5:0] shl_ln_fu_164_p3;
wire   [5:0] sub_ln29_fu_172_p2;
wire   [63:0] zext_ln29_fu_178_p1;
wire   [63:0] lshr_ln29_fu_182_p2;
wire   [4:0] idx53_cast_fu_132_p1;
wire   [0:0] tmp_1_fu_200_p3;
wire   [0:0] tmp_fu_192_p3;
wire   [1:0] or_ln_fu_227_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_64 = 4'd0;
#0 ap_done_reg = 1'b0;
end

axi_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln29_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_64 <= add_ln29_fu_150_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln29_reg_263 <= or_ln29_fu_208_p2;
        tmp_2_reg_268 <= idx53_cast_fu_132_p1[32'd3];
        trunc_ln29_6_reg_255 <= trunc_ln29_6_fu_188_p1;
        trunc_ln29_reg_251 <= trunc_ln29_fu_156_p1;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_ce0 = 1'b1;
    end else begin
        c_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln29_reg_251 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_we0 = 1'b1;
    end else begin
        c_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_1_ce0 = 1'b1;
    end else begin
        c_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln29_reg_251 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_1_we0 = 1'b1;
    end else begin
        c_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_2_ce0 = 1'b1;
    end else begin
        c_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln29_reg_251 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_2_we0 = 1'b1;
    end else begin
        c_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_3_ce0 = 1'b1;
    end else begin
        c_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln29_reg_251 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_3_we0 = 1'b1;
    end else begin
        c_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_150_p2 = (ap_sig_allocacmp_i_2 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign c_0_address0 = zext_ln29_2_fu_233_p1;

assign c_0_d0 = trunc_ln29_6_reg_255;

assign c_1_address0 = zext_ln29_2_fu_233_p1;

assign c_1_d0 = trunc_ln29_6_reg_255;

assign c_2_address0 = zext_ln29_2_fu_233_p1;

assign c_2_d0 = trunc_ln29_6_reg_255;

assign c_3_address0 = zext_ln29_2_fu_233_p1;

assign c_3_d0 = trunc_ln29_6_reg_255;

assign icmp_ln29_fu_144_p2 = ((ap_sig_allocacmp_i_2 == 4'd8) ? 1'b1 : 1'b0);

assign idx53_cast_fu_132_p1 = idx53;

assign lshr_ln29_fu_182_p2 = s_0_26 >> zext_ln29_fu_178_p1;

assign or_ln29_fu_208_p2 = (tmp_fu_192_p3 | tmp_1_fu_200_p3);

assign or_ln_fu_227_p3 = {{tmp_2_reg_268}, {or_ln29_reg_263}};

assign shl_ln_fu_164_p3 = {{trunc_ln29_5_fu_160_p1}, {3'd0}};

assign sub_ln29_fu_172_p2 = ($signed(6'd56) - $signed(shl_ln_fu_164_p3));

assign tmp_1_fu_200_p3 = idx53_cast_fu_132_p1[32'd2];

assign tmp_fu_192_p3 = ap_sig_allocacmp_i_2[32'd2];

assign trunc_ln29_5_fu_160_p1 = ap_sig_allocacmp_i_2[2:0];

assign trunc_ln29_6_fu_188_p1 = lshr_ln29_fu_182_p2[7:0];

assign trunc_ln29_fu_156_p1 = ap_sig_allocacmp_i_2[1:0];

assign zext_ln29_2_fu_233_p1 = or_ln_fu_227_p3;

assign zext_ln29_fu_178_p1 = sub_ln29_fu_172_p2;

endmodule //axi_encrypt_crypto_aead_encrypt_Pipeline_VITIS_LOOP_29_1
