-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_encrypt is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axi_encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi_encrypt_axi_encrypt,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.008000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=5106,HLS_SYN_LUT=14976,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal c : STD_LOGIC_VECTOR (63 downto 0);
    signal m : STD_LOGIC_VECTOR (63 downto 0);
    signal ad : STD_LOGIC_VECTOR (63 downto 0);
    signal nsec : STD_LOGIC_VECTOR (63 downto 0);
    signal npub : STD_LOGIC_VECTOR (63 downto 0);
    signal k : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal reg_630 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_1177 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln2_reg_1182 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln3_reg_1187 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln4_reg_1192 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln5_reg_1197 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln6_reg_1202 : STD_LOGIC_VECTOR (60 downto 0);
    signal gmem_addr_read_2_reg_1243 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_read_reg_1248 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_read_1_reg_1253 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_read_reg_1258 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_read_1_reg_1263 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_read_reg_1268 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_read_1_reg_1273 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_u8_16_reg_1278 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_17_reg_1283 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_18_reg_1288 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_19_reg_1293 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_20_reg_1298 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_21_reg_1303 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_22_reg_1308 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_23_reg_1313 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_24_reg_1318 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_25_reg_1323 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_26_reg_1328 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_27_reg_1333 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_28_reg_1338 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_29_reg_1343 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_30_reg_1348 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_u8_31_reg_1353 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_16_reg_1358 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_17_reg_1363 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_18_reg_1368 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_19_reg_1373 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_20_reg_1378 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_21_reg_1383 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_22_reg_1388 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_23_reg_1393 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_24_reg_1398 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_25_reg_1403 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_26_reg_1408 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_27_reg_1413 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_28_reg_1418 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_29_reg_1423 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_30_reg_1428 : STD_LOGIC_VECTOR (7 downto 0);
    signal ad_u8_31_reg_1433 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_16_reg_1438 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_17_reg_1443 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_18_reg_1448 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_19_reg_1453 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_20_reg_1458 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_21_reg_1463 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_22_reg_1468 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_23_reg_1473 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_24_reg_1478 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_25_reg_1483 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_26_reg_1488 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_27_reg_1493 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_28_reg_1498 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_29_reg_1503 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_30_reg_1508 : STD_LOGIC_VECTOR (7 downto 0);
    signal npub_u8_31_reg_1513 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_reg_1518 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_1_reg_1523 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_2_reg_1528 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_3_reg_1533 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_4_reg_1538 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_5_reg_1543 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_6_reg_1548 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_7_reg_1553 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_8_reg_1558 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_9_reg_1563 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_10_reg_1568 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_11_reg_1573 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_12_reg_1578 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_13_reg_1583 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_14_reg_1588 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_15_reg_1593 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_16_reg_1598 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal k_u8_17_reg_1603 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_18_reg_1608 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_19_reg_1613 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_20_reg_1618 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_21_reg_1623 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_22_reg_1628 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_23_reg_1633 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_24_reg_1638 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_25_reg_1643 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_26_reg_1648 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_27_reg_1653 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_28_reg_1658 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_29_reg_1663 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_30_reg_1668 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_u8_31_reg_1673 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_u8_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_u8_ce0 : STD_LOGIC;
    signal c_u8_we0 : STD_LOGIC;
    signal c_u8_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_u8_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_u8_1_ce0 : STD_LOGIC;
    signal c_u8_1_we0 : STD_LOGIC;
    signal c_u8_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_u8_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_u8_2_ce0 : STD_LOGIC;
    signal c_u8_2_we0 : STD_LOGIC;
    signal c_u8_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_u8_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_u8_3_ce0 : STD_LOGIC;
    signal c_u8_3_we0 : STD_LOGIC;
    signal c_u8_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_fu_222_ap_start : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_ap_done : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_ap_idle : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_ap_ready : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_a : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_u64_to_u8_array_fu_222_b_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_u64_to_u8_array_fu_222_b_0_ce0 : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_b_0_we0 : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_b_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_fu_222_b_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_u64_to_u8_array_fu_222_b_1_ce0 : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_b_1_we0 : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_b_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_fu_222_b_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_u64_to_u8_array_fu_222_b_2_ce0 : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_b_2_we0 : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_b_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_fu_222_b_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_u64_to_u8_array_fu_222_b_3_ce0 : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_b_3_we0 : STD_LOGIC;
    signal grp_u64_to_u8_array_fu_222_b_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_fu_222_idx : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_u64_to_u8_array_fu_222_ap_ce : STD_LOGIC;
    signal grp_u64_to_u8_array_clone_fu_236_ap_ready : STD_LOGIC;
    signal grp_u64_to_u8_array_clone_fu_236_a : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read8 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read9 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read11 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read12 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read13 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read14 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_p_read15 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_idx : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_clone_fu_236_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_ready : STD_LOGIC;
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret43_u64_to_u8_array_clone_fu_275_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_ready : STD_LOGIC;
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_p_read15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret44_u64_to_u8_array_clone_fu_298_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_ready : STD_LOGIC;
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret45_u64_to_u8_array_clone_fu_337_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_ready : STD_LOGIC;
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_p_read15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret46_u64_to_u8_array_clone_fu_360_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_ready : STD_LOGIC;
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret47_u64_to_u8_array_clone_fu_399_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_ready : STD_LOGIC;
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_p_read15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret48_u64_to_u8_array_clone_fu_422_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_crypto_aead_encrypt_fu_462_ap_start : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_ap_done : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_ap_idle : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_ap_ready : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_c_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crypto_aead_encrypt_fu_462_c_0_ce0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_c_0_we0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_c_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_crypto_aead_encrypt_fu_462_c_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crypto_aead_encrypt_fu_462_c_1_ce0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_c_1_we0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_c_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_crypto_aead_encrypt_fu_462_c_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crypto_aead_encrypt_fu_462_c_2_ce0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_c_2_we0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_c_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_crypto_aead_encrypt_fu_462_c_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crypto_aead_encrypt_fu_462_c_3_ce0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_c_3_we0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_c_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_u64_to_u8_array_fu_222_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm_state11 : STD_LOGIC;
    signal ap_NS_fsm_state13 : STD_LOGIC;
    signal ap_NS_fsm_state15 : STD_LOGIC;
    signal ap_NS_fsm_state17 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_fu_462_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal sext_ln125_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln130_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln133_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln136_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln139_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln142_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component axi_encrypt_u64_to_u8_array IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        b_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        b_0_ce0 : OUT STD_LOGIC;
        b_0_we0 : OUT STD_LOGIC;
        b_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        b_1_ce0 : OUT STD_LOGIC;
        b_1_we0 : OUT STD_LOGIC;
        b_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        b_2_ce0 : OUT STD_LOGIC;
        b_2_we0 : OUT STD_LOGIC;
        b_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        b_3_ce0 : OUT STD_LOGIC;
        b_3_we0 : OUT STD_LOGIC;
        b_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        idx : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component axi_encrypt_u64_to_u8_array_clone IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
        idx : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component axi_encrypt_crypto_aead_encrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        c_0_ce0 : OUT STD_LOGIC;
        c_0_we0 : OUT STD_LOGIC;
        c_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        c_1_ce0 : OUT STD_LOGIC;
        c_1_we0 : OUT STD_LOGIC;
        c_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        c_2_ce0 : OUT STD_LOGIC;
        c_2_we0 : OUT STD_LOGIC;
        c_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        c_3_ce0 : OUT STD_LOGIC;
        c_3_we0 : OUT STD_LOGIC;
        c_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read32 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read33 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read34 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read35 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read36 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read37 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read38 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read39 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read40 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read41 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read42 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read43 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read44 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read45 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read46 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read47 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read48 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read49 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read50 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read51 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read52 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read53 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read54 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read55 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read56 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read57 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read58 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read59 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read60 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read61 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read62 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read63 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read64 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component axi_encrypt_c_u8_RAM_AUTO_0R0W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component axi_encrypt_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        c : OUT STD_LOGIC_VECTOR (63 downto 0);
        m : OUT STD_LOGIC_VECTOR (63 downto 0);
        ad : OUT STD_LOGIC_VECTOR (63 downto 0);
        nsec : OUT STD_LOGIC_VECTOR (63 downto 0);
        npub : OUT STD_LOGIC_VECTOR (63 downto 0);
        k : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component axi_encrypt_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    c_u8_U : component axi_encrypt_c_u8_RAM_AUTO_0R0W
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_u8_address0,
        ce0 => c_u8_ce0,
        we0 => c_u8_we0,
        d0 => c_u8_d0);

    c_u8_1_U : component axi_encrypt_c_u8_RAM_AUTO_0R0W
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_u8_1_address0,
        ce0 => c_u8_1_ce0,
        we0 => c_u8_1_we0,
        d0 => c_u8_1_d0);

    c_u8_2_U : component axi_encrypt_c_u8_RAM_AUTO_0R0W
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_u8_2_address0,
        ce0 => c_u8_2_ce0,
        we0 => c_u8_2_we0,
        d0 => c_u8_2_d0);

    c_u8_3_U : component axi_encrypt_c_u8_RAM_AUTO_0R0W
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_u8_3_address0,
        ce0 => c_u8_3_ce0,
        we0 => c_u8_3_we0,
        d0 => c_u8_3_d0);

    grp_u64_to_u8_array_fu_222 : component axi_encrypt_u64_to_u8_array
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_u64_to_u8_array_fu_222_ap_start,
        ap_done => grp_u64_to_u8_array_fu_222_ap_done,
        ap_idle => grp_u64_to_u8_array_fu_222_ap_idle,
        ap_ready => grp_u64_to_u8_array_fu_222_ap_ready,
        a => grp_u64_to_u8_array_fu_222_a,
        b_0_address0 => grp_u64_to_u8_array_fu_222_b_0_address0,
        b_0_ce0 => grp_u64_to_u8_array_fu_222_b_0_ce0,
        b_0_we0 => grp_u64_to_u8_array_fu_222_b_0_we0,
        b_0_d0 => grp_u64_to_u8_array_fu_222_b_0_d0,
        b_1_address0 => grp_u64_to_u8_array_fu_222_b_1_address0,
        b_1_ce0 => grp_u64_to_u8_array_fu_222_b_1_ce0,
        b_1_we0 => grp_u64_to_u8_array_fu_222_b_1_we0,
        b_1_d0 => grp_u64_to_u8_array_fu_222_b_1_d0,
        b_2_address0 => grp_u64_to_u8_array_fu_222_b_2_address0,
        b_2_ce0 => grp_u64_to_u8_array_fu_222_b_2_ce0,
        b_2_we0 => grp_u64_to_u8_array_fu_222_b_2_we0,
        b_2_d0 => grp_u64_to_u8_array_fu_222_b_2_d0,
        b_3_address0 => grp_u64_to_u8_array_fu_222_b_3_address0,
        b_3_ce0 => grp_u64_to_u8_array_fu_222_b_3_ce0,
        b_3_we0 => grp_u64_to_u8_array_fu_222_b_3_we0,
        b_3_d0 => grp_u64_to_u8_array_fu_222_b_3_d0,
        idx => grp_u64_to_u8_array_fu_222_idx,
        ap_ce => grp_u64_to_u8_array_fu_222_ap_ce);

    grp_u64_to_u8_array_clone_fu_236 : component axi_encrypt_u64_to_u8_array_clone
    port map (
        ap_ready => grp_u64_to_u8_array_clone_fu_236_ap_ready,
        a => grp_u64_to_u8_array_clone_fu_236_a,
        p_read => grp_u64_to_u8_array_clone_fu_236_p_read,
        p_read1 => grp_u64_to_u8_array_clone_fu_236_p_read1,
        p_read2 => grp_u64_to_u8_array_clone_fu_236_p_read2,
        p_read3 => grp_u64_to_u8_array_clone_fu_236_p_read3,
        p_read4 => grp_u64_to_u8_array_clone_fu_236_p_read4,
        p_read5 => grp_u64_to_u8_array_clone_fu_236_p_read5,
        p_read6 => grp_u64_to_u8_array_clone_fu_236_p_read6,
        p_read7 => grp_u64_to_u8_array_clone_fu_236_p_read7,
        p_read8 => grp_u64_to_u8_array_clone_fu_236_p_read8,
        p_read9 => grp_u64_to_u8_array_clone_fu_236_p_read9,
        p_read10 => grp_u64_to_u8_array_clone_fu_236_p_read10,
        p_read11 => grp_u64_to_u8_array_clone_fu_236_p_read11,
        p_read12 => grp_u64_to_u8_array_clone_fu_236_p_read12,
        p_read13 => grp_u64_to_u8_array_clone_fu_236_p_read13,
        p_read14 => grp_u64_to_u8_array_clone_fu_236_p_read14,
        p_read15 => grp_u64_to_u8_array_clone_fu_236_p_read15,
        idx => grp_u64_to_u8_array_clone_fu_236_idx,
        ap_return_0 => grp_u64_to_u8_array_clone_fu_236_ap_return_0,
        ap_return_1 => grp_u64_to_u8_array_clone_fu_236_ap_return_1,
        ap_return_2 => grp_u64_to_u8_array_clone_fu_236_ap_return_2,
        ap_return_3 => grp_u64_to_u8_array_clone_fu_236_ap_return_3,
        ap_return_4 => grp_u64_to_u8_array_clone_fu_236_ap_return_4,
        ap_return_5 => grp_u64_to_u8_array_clone_fu_236_ap_return_5,
        ap_return_6 => grp_u64_to_u8_array_clone_fu_236_ap_return_6,
        ap_return_7 => grp_u64_to_u8_array_clone_fu_236_ap_return_7,
        ap_return_8 => grp_u64_to_u8_array_clone_fu_236_ap_return_8,
        ap_return_9 => grp_u64_to_u8_array_clone_fu_236_ap_return_9,
        ap_return_10 => grp_u64_to_u8_array_clone_fu_236_ap_return_10,
        ap_return_11 => grp_u64_to_u8_array_clone_fu_236_ap_return_11,
        ap_return_12 => grp_u64_to_u8_array_clone_fu_236_ap_return_12,
        ap_return_13 => grp_u64_to_u8_array_clone_fu_236_ap_return_13,
        ap_return_14 => grp_u64_to_u8_array_clone_fu_236_ap_return_14,
        ap_return_15 => grp_u64_to_u8_array_clone_fu_236_ap_return_15);

    call_ret43_u64_to_u8_array_clone_fu_275 : component axi_encrypt_u64_to_u8_array_clone
    port map (
        ap_ready => call_ret43_u64_to_u8_array_clone_fu_275_ap_ready,
        a => gmem_addr_1_read_1_reg_1253,
        p_read => grp_u64_to_u8_array_clone_fu_236_ap_return_0,
        p_read1 => grp_u64_to_u8_array_clone_fu_236_ap_return_1,
        p_read2 => grp_u64_to_u8_array_clone_fu_236_ap_return_2,
        p_read3 => grp_u64_to_u8_array_clone_fu_236_ap_return_3,
        p_read4 => grp_u64_to_u8_array_clone_fu_236_ap_return_4,
        p_read5 => grp_u64_to_u8_array_clone_fu_236_ap_return_5,
        p_read6 => grp_u64_to_u8_array_clone_fu_236_ap_return_6,
        p_read7 => grp_u64_to_u8_array_clone_fu_236_ap_return_7,
        p_read8 => grp_u64_to_u8_array_clone_fu_236_ap_return_8,
        p_read9 => grp_u64_to_u8_array_clone_fu_236_ap_return_9,
        p_read10 => grp_u64_to_u8_array_clone_fu_236_ap_return_10,
        p_read11 => grp_u64_to_u8_array_clone_fu_236_ap_return_11,
        p_read12 => grp_u64_to_u8_array_clone_fu_236_ap_return_12,
        p_read13 => grp_u64_to_u8_array_clone_fu_236_ap_return_13,
        p_read14 => grp_u64_to_u8_array_clone_fu_236_ap_return_14,
        p_read15 => grp_u64_to_u8_array_clone_fu_236_ap_return_15,
        idx => ap_const_lv4_8,
        ap_return_0 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_0,
        ap_return_1 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_1,
        ap_return_2 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_2,
        ap_return_3 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_3,
        ap_return_4 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_4,
        ap_return_5 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_5,
        ap_return_6 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_6,
        ap_return_7 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_7,
        ap_return_8 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_8,
        ap_return_9 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_9,
        ap_return_10 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_10,
        ap_return_11 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_11,
        ap_return_12 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_12,
        ap_return_13 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_13,
        ap_return_14 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_14,
        ap_return_15 => call_ret43_u64_to_u8_array_clone_fu_275_ap_return_15);

    call_ret44_u64_to_u8_array_clone_fu_298 : component axi_encrypt_u64_to_u8_array_clone
    port map (
        ap_ready => call_ret44_u64_to_u8_array_clone_fu_298_ap_ready,
        a => gmem_addr_2_read_reg_1258,
        p_read => call_ret44_u64_to_u8_array_clone_fu_298_p_read,
        p_read1 => call_ret44_u64_to_u8_array_clone_fu_298_p_read1,
        p_read2 => call_ret44_u64_to_u8_array_clone_fu_298_p_read2,
        p_read3 => call_ret44_u64_to_u8_array_clone_fu_298_p_read3,
        p_read4 => call_ret44_u64_to_u8_array_clone_fu_298_p_read4,
        p_read5 => call_ret44_u64_to_u8_array_clone_fu_298_p_read5,
        p_read6 => call_ret44_u64_to_u8_array_clone_fu_298_p_read6,
        p_read7 => call_ret44_u64_to_u8_array_clone_fu_298_p_read7,
        p_read8 => call_ret44_u64_to_u8_array_clone_fu_298_p_read8,
        p_read9 => call_ret44_u64_to_u8_array_clone_fu_298_p_read9,
        p_read10 => call_ret44_u64_to_u8_array_clone_fu_298_p_read10,
        p_read11 => call_ret44_u64_to_u8_array_clone_fu_298_p_read11,
        p_read12 => call_ret44_u64_to_u8_array_clone_fu_298_p_read12,
        p_read13 => call_ret44_u64_to_u8_array_clone_fu_298_p_read13,
        p_read14 => call_ret44_u64_to_u8_array_clone_fu_298_p_read14,
        p_read15 => call_ret44_u64_to_u8_array_clone_fu_298_p_read15,
        idx => ap_const_lv4_0,
        ap_return_0 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_0,
        ap_return_1 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_1,
        ap_return_2 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_2,
        ap_return_3 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_3,
        ap_return_4 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_4,
        ap_return_5 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_5,
        ap_return_6 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_6,
        ap_return_7 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_7,
        ap_return_8 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_8,
        ap_return_9 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_9,
        ap_return_10 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_10,
        ap_return_11 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_11,
        ap_return_12 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_12,
        ap_return_13 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_13,
        ap_return_14 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_14,
        ap_return_15 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_15);

    call_ret45_u64_to_u8_array_clone_fu_337 : component axi_encrypt_u64_to_u8_array_clone
    port map (
        ap_ready => call_ret45_u64_to_u8_array_clone_fu_337_ap_ready,
        a => gmem_addr_2_read_1_reg_1263,
        p_read => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_0,
        p_read1 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_1,
        p_read2 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_2,
        p_read3 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_3,
        p_read4 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_4,
        p_read5 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_5,
        p_read6 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_6,
        p_read7 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_7,
        p_read8 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_8,
        p_read9 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_9,
        p_read10 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_10,
        p_read11 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_11,
        p_read12 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_12,
        p_read13 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_13,
        p_read14 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_14,
        p_read15 => call_ret44_u64_to_u8_array_clone_fu_298_ap_return_15,
        idx => ap_const_lv4_8,
        ap_return_0 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_0,
        ap_return_1 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_1,
        ap_return_2 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_2,
        ap_return_3 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_3,
        ap_return_4 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_4,
        ap_return_5 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_5,
        ap_return_6 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_6,
        ap_return_7 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_7,
        ap_return_8 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_8,
        ap_return_9 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_9,
        ap_return_10 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_10,
        ap_return_11 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_11,
        ap_return_12 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_12,
        ap_return_13 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_13,
        ap_return_14 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_14,
        ap_return_15 => call_ret45_u64_to_u8_array_clone_fu_337_ap_return_15);

    call_ret46_u64_to_u8_array_clone_fu_360 : component axi_encrypt_u64_to_u8_array_clone
    port map (
        ap_ready => call_ret46_u64_to_u8_array_clone_fu_360_ap_ready,
        a => gmem_addr_4_read_reg_1268,
        p_read => call_ret46_u64_to_u8_array_clone_fu_360_p_read,
        p_read1 => call_ret46_u64_to_u8_array_clone_fu_360_p_read1,
        p_read2 => call_ret46_u64_to_u8_array_clone_fu_360_p_read2,
        p_read3 => call_ret46_u64_to_u8_array_clone_fu_360_p_read3,
        p_read4 => call_ret46_u64_to_u8_array_clone_fu_360_p_read4,
        p_read5 => call_ret46_u64_to_u8_array_clone_fu_360_p_read5,
        p_read6 => call_ret46_u64_to_u8_array_clone_fu_360_p_read6,
        p_read7 => call_ret46_u64_to_u8_array_clone_fu_360_p_read7,
        p_read8 => call_ret46_u64_to_u8_array_clone_fu_360_p_read8,
        p_read9 => call_ret46_u64_to_u8_array_clone_fu_360_p_read9,
        p_read10 => call_ret46_u64_to_u8_array_clone_fu_360_p_read10,
        p_read11 => call_ret46_u64_to_u8_array_clone_fu_360_p_read11,
        p_read12 => call_ret46_u64_to_u8_array_clone_fu_360_p_read12,
        p_read13 => call_ret46_u64_to_u8_array_clone_fu_360_p_read13,
        p_read14 => call_ret46_u64_to_u8_array_clone_fu_360_p_read14,
        p_read15 => call_ret46_u64_to_u8_array_clone_fu_360_p_read15,
        idx => ap_const_lv4_0,
        ap_return_0 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_0,
        ap_return_1 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_1,
        ap_return_2 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_2,
        ap_return_3 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_3,
        ap_return_4 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_4,
        ap_return_5 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_5,
        ap_return_6 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_6,
        ap_return_7 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_7,
        ap_return_8 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_8,
        ap_return_9 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_9,
        ap_return_10 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_10,
        ap_return_11 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_11,
        ap_return_12 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_12,
        ap_return_13 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_13,
        ap_return_14 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_14,
        ap_return_15 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_15);

    call_ret47_u64_to_u8_array_clone_fu_399 : component axi_encrypt_u64_to_u8_array_clone
    port map (
        ap_ready => call_ret47_u64_to_u8_array_clone_fu_399_ap_ready,
        a => gmem_addr_4_read_1_reg_1273,
        p_read => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_0,
        p_read1 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_1,
        p_read2 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_2,
        p_read3 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_3,
        p_read4 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_4,
        p_read5 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_5,
        p_read6 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_6,
        p_read7 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_7,
        p_read8 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_8,
        p_read9 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_9,
        p_read10 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_10,
        p_read11 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_11,
        p_read12 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_12,
        p_read13 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_13,
        p_read14 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_14,
        p_read15 => call_ret46_u64_to_u8_array_clone_fu_360_ap_return_15,
        idx => ap_const_lv4_8,
        ap_return_0 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_0,
        ap_return_1 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_1,
        ap_return_2 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_2,
        ap_return_3 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_3,
        ap_return_4 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_4,
        ap_return_5 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_5,
        ap_return_6 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_6,
        ap_return_7 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_7,
        ap_return_8 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_8,
        ap_return_9 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_9,
        ap_return_10 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_10,
        ap_return_11 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_11,
        ap_return_12 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_12,
        ap_return_13 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_13,
        ap_return_14 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_14,
        ap_return_15 => call_ret47_u64_to_u8_array_clone_fu_399_ap_return_15);

    call_ret48_u64_to_u8_array_clone_fu_422 : component axi_encrypt_u64_to_u8_array_clone
    port map (
        ap_ready => call_ret48_u64_to_u8_array_clone_fu_422_ap_ready,
        a => reg_635,
        p_read => call_ret48_u64_to_u8_array_clone_fu_422_p_read,
        p_read1 => call_ret48_u64_to_u8_array_clone_fu_422_p_read1,
        p_read2 => call_ret48_u64_to_u8_array_clone_fu_422_p_read2,
        p_read3 => call_ret48_u64_to_u8_array_clone_fu_422_p_read3,
        p_read4 => call_ret48_u64_to_u8_array_clone_fu_422_p_read4,
        p_read5 => call_ret48_u64_to_u8_array_clone_fu_422_p_read5,
        p_read6 => call_ret48_u64_to_u8_array_clone_fu_422_p_read6,
        p_read7 => call_ret48_u64_to_u8_array_clone_fu_422_p_read7,
        p_read8 => call_ret48_u64_to_u8_array_clone_fu_422_p_read8,
        p_read9 => call_ret48_u64_to_u8_array_clone_fu_422_p_read9,
        p_read10 => call_ret48_u64_to_u8_array_clone_fu_422_p_read10,
        p_read11 => call_ret48_u64_to_u8_array_clone_fu_422_p_read11,
        p_read12 => call_ret48_u64_to_u8_array_clone_fu_422_p_read12,
        p_read13 => call_ret48_u64_to_u8_array_clone_fu_422_p_read13,
        p_read14 => call_ret48_u64_to_u8_array_clone_fu_422_p_read14,
        p_read15 => call_ret48_u64_to_u8_array_clone_fu_422_p_read15,
        idx => ap_const_lv4_0,
        ap_return_0 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_0,
        ap_return_1 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_1,
        ap_return_2 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_2,
        ap_return_3 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_3,
        ap_return_4 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_4,
        ap_return_5 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_5,
        ap_return_6 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_6,
        ap_return_7 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_7,
        ap_return_8 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_8,
        ap_return_9 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_9,
        ap_return_10 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_10,
        ap_return_11 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_11,
        ap_return_12 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_12,
        ap_return_13 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_13,
        ap_return_14 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_14,
        ap_return_15 => call_ret48_u64_to_u8_array_clone_fu_422_ap_return_15);

    grp_crypto_aead_encrypt_fu_462 : component axi_encrypt_crypto_aead_encrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crypto_aead_encrypt_fu_462_ap_start,
        ap_done => grp_crypto_aead_encrypt_fu_462_ap_done,
        ap_idle => grp_crypto_aead_encrypt_fu_462_ap_idle,
        ap_ready => grp_crypto_aead_encrypt_fu_462_ap_ready,
        c_0_address0 => grp_crypto_aead_encrypt_fu_462_c_0_address0,
        c_0_ce0 => grp_crypto_aead_encrypt_fu_462_c_0_ce0,
        c_0_we0 => grp_crypto_aead_encrypt_fu_462_c_0_we0,
        c_0_d0 => grp_crypto_aead_encrypt_fu_462_c_0_d0,
        c_1_address0 => grp_crypto_aead_encrypt_fu_462_c_1_address0,
        c_1_ce0 => grp_crypto_aead_encrypt_fu_462_c_1_ce0,
        c_1_we0 => grp_crypto_aead_encrypt_fu_462_c_1_we0,
        c_1_d0 => grp_crypto_aead_encrypt_fu_462_c_1_d0,
        c_2_address0 => grp_crypto_aead_encrypt_fu_462_c_2_address0,
        c_2_ce0 => grp_crypto_aead_encrypt_fu_462_c_2_ce0,
        c_2_we0 => grp_crypto_aead_encrypt_fu_462_c_2_we0,
        c_2_d0 => grp_crypto_aead_encrypt_fu_462_c_2_d0,
        c_3_address0 => grp_crypto_aead_encrypt_fu_462_c_3_address0,
        c_3_ce0 => grp_crypto_aead_encrypt_fu_462_c_3_ce0,
        c_3_we0 => grp_crypto_aead_encrypt_fu_462_c_3_we0,
        c_3_d0 => grp_crypto_aead_encrypt_fu_462_c_3_d0,
        p_read1 => m_u8_16_reg_1278,
        p_read2 => m_u8_17_reg_1283,
        p_read3 => m_u8_18_reg_1288,
        p_read4 => m_u8_19_reg_1293,
        p_read5 => m_u8_20_reg_1298,
        p_read6 => m_u8_21_reg_1303,
        p_read7 => m_u8_22_reg_1308,
        p_read8 => m_u8_23_reg_1313,
        p_read9 => m_u8_24_reg_1318,
        p_read10 => m_u8_25_reg_1323,
        p_read11 => m_u8_26_reg_1328,
        p_read12 => m_u8_27_reg_1333,
        p_read13 => m_u8_28_reg_1338,
        p_read14 => m_u8_29_reg_1343,
        p_read15 => m_u8_30_reg_1348,
        p_read16 => m_u8_31_reg_1353,
        p_read17 => ad_u8_16_reg_1358,
        p_read18 => ad_u8_17_reg_1363,
        p_read19 => ad_u8_18_reg_1368,
        p_read20 => ad_u8_19_reg_1373,
        p_read21 => ad_u8_20_reg_1378,
        p_read22 => ad_u8_21_reg_1383,
        p_read23 => ad_u8_22_reg_1388,
        p_read24 => ad_u8_23_reg_1393,
        p_read25 => ad_u8_24_reg_1398,
        p_read26 => ad_u8_25_reg_1403,
        p_read27 => ad_u8_26_reg_1408,
        p_read28 => ad_u8_27_reg_1413,
        p_read29 => ad_u8_28_reg_1418,
        p_read30 => ad_u8_29_reg_1423,
        p_read31 => ad_u8_30_reg_1428,
        p_read32 => ad_u8_31_reg_1433,
        p_read33 => npub_u8_16_reg_1438,
        p_read34 => npub_u8_17_reg_1443,
        p_read35 => npub_u8_18_reg_1448,
        p_read36 => npub_u8_19_reg_1453,
        p_read37 => npub_u8_20_reg_1458,
        p_read38 => npub_u8_21_reg_1463,
        p_read39 => npub_u8_22_reg_1468,
        p_read40 => npub_u8_23_reg_1473,
        p_read41 => npub_u8_24_reg_1478,
        p_read42 => npub_u8_25_reg_1483,
        p_read43 => npub_u8_26_reg_1488,
        p_read44 => npub_u8_27_reg_1493,
        p_read45 => npub_u8_28_reg_1498,
        p_read46 => npub_u8_29_reg_1503,
        p_read47 => npub_u8_30_reg_1508,
        p_read48 => npub_u8_31_reg_1513,
        p_read49 => k_u8_16_reg_1598,
        p_read50 => k_u8_17_reg_1603,
        p_read51 => k_u8_18_reg_1608,
        p_read52 => k_u8_19_reg_1613,
        p_read53 => k_u8_20_reg_1618,
        p_read54 => k_u8_21_reg_1623,
        p_read55 => k_u8_22_reg_1628,
        p_read56 => k_u8_23_reg_1633,
        p_read57 => k_u8_24_reg_1638,
        p_read58 => k_u8_25_reg_1643,
        p_read59 => k_u8_26_reg_1648,
        p_read60 => k_u8_27_reg_1653,
        p_read61 => k_u8_28_reg_1658,
        p_read62 => k_u8_29_reg_1663,
        p_read63 => k_u8_30_reg_1668,
        p_read64 => k_u8_31_reg_1673);

    control_s_axi_U : component axi_encrypt_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_20,
        c => c,
        m => m,
        ad => ad,
        nsec => nsec,
        npub => npub,
        k => k);

    gmem_m_axi_U : component axi_encrypt_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 64,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_crypto_aead_encrypt_fu_462_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_crypto_aead_encrypt_fu_462_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_crypto_aead_encrypt_fu_462_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_crypto_aead_encrypt_fu_462_ap_ready = ap_const_logic_1)) then 
                    grp_crypto_aead_encrypt_fu_462_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_u64_to_u8_array_fu_222_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_u64_to_u8_array_fu_222_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state17) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_NS_fsm_state15) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_NS_fsm_state13) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_NS_fsm_state11) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    grp_u64_to_u8_array_fu_222_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_u64_to_u8_array_fu_222_ap_ready = ap_const_logic_1)) then 
                    grp_u64_to_u8_array_fu_222_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                ad_u8_16_reg_1358 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_0;
                ad_u8_17_reg_1363 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_1;
                ad_u8_18_reg_1368 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_2;
                ad_u8_19_reg_1373 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_3;
                ad_u8_20_reg_1378 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_4;
                ad_u8_21_reg_1383 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_5;
                ad_u8_22_reg_1388 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_6;
                ad_u8_23_reg_1393 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_7;
                ad_u8_24_reg_1398 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_8;
                ad_u8_25_reg_1403 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_9;
                ad_u8_26_reg_1408 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_10;
                ad_u8_27_reg_1413 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_11;
                ad_u8_28_reg_1418 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_12;
                ad_u8_29_reg_1423 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_13;
                ad_u8_30_reg_1428 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_14;
                ad_u8_31_reg_1433 <= call_ret45_u64_to_u8_array_clone_fu_337_ap_return_15;
                k_u8_10_reg_1568 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_10;
                k_u8_11_reg_1573 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_11;
                k_u8_12_reg_1578 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_12;
                k_u8_13_reg_1583 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_13;
                k_u8_14_reg_1588 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_14;
                k_u8_15_reg_1593 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_15;
                k_u8_1_reg_1523 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_1;
                k_u8_2_reg_1528 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_2;
                k_u8_3_reg_1533 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_3;
                k_u8_4_reg_1538 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_4;
                k_u8_5_reg_1543 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_5;
                k_u8_6_reg_1548 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_6;
                k_u8_7_reg_1553 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_7;
                k_u8_8_reg_1558 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_8;
                k_u8_9_reg_1563 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_9;
                k_u8_reg_1518 <= call_ret48_u64_to_u8_array_clone_fu_422_ap_return_0;
                m_u8_16_reg_1278 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_0;
                m_u8_17_reg_1283 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_1;
                m_u8_18_reg_1288 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_2;
                m_u8_19_reg_1293 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_3;
                m_u8_20_reg_1298 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_4;
                m_u8_21_reg_1303 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_5;
                m_u8_22_reg_1308 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_6;
                m_u8_23_reg_1313 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_7;
                m_u8_24_reg_1318 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_8;
                m_u8_25_reg_1323 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_9;
                m_u8_26_reg_1328 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_10;
                m_u8_27_reg_1333 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_11;
                m_u8_28_reg_1338 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_12;
                m_u8_29_reg_1343 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_13;
                m_u8_30_reg_1348 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_14;
                m_u8_31_reg_1353 <= call_ret43_u64_to_u8_array_clone_fu_275_ap_return_15;
                npub_u8_16_reg_1438 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_0;
                npub_u8_17_reg_1443 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_1;
                npub_u8_18_reg_1448 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_2;
                npub_u8_19_reg_1453 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_3;
                npub_u8_20_reg_1458 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_4;
                npub_u8_21_reg_1463 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_5;
                npub_u8_22_reg_1468 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_6;
                npub_u8_23_reg_1473 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_7;
                npub_u8_24_reg_1478 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_8;
                npub_u8_25_reg_1483 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_9;
                npub_u8_26_reg_1488 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_10;
                npub_u8_27_reg_1493 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_11;
                npub_u8_28_reg_1498 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_12;
                npub_u8_29_reg_1503 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_13;
                npub_u8_30_reg_1508 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_14;
                npub_u8_31_reg_1513 <= call_ret47_u64_to_u8_array_clone_fu_399_ap_return_15;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                gmem_addr_1_read_1_reg_1253 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                gmem_addr_1_read_reg_1248 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                gmem_addr_2_read_1_reg_1263 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                gmem_addr_2_read_reg_1258 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                gmem_addr_4_read_1_reg_1273 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                gmem_addr_4_read_reg_1268 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                gmem_addr_read_2_reg_1243 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                k_u8_16_reg_1598 <= grp_u64_to_u8_array_clone_fu_236_ap_return_0;
                k_u8_17_reg_1603 <= grp_u64_to_u8_array_clone_fu_236_ap_return_1;
                k_u8_18_reg_1608 <= grp_u64_to_u8_array_clone_fu_236_ap_return_2;
                k_u8_19_reg_1613 <= grp_u64_to_u8_array_clone_fu_236_ap_return_3;
                k_u8_20_reg_1618 <= grp_u64_to_u8_array_clone_fu_236_ap_return_4;
                k_u8_21_reg_1623 <= grp_u64_to_u8_array_clone_fu_236_ap_return_5;
                k_u8_22_reg_1628 <= grp_u64_to_u8_array_clone_fu_236_ap_return_6;
                k_u8_23_reg_1633 <= grp_u64_to_u8_array_clone_fu_236_ap_return_7;
                k_u8_24_reg_1638 <= grp_u64_to_u8_array_clone_fu_236_ap_return_8;
                k_u8_25_reg_1643 <= grp_u64_to_u8_array_clone_fu_236_ap_return_9;
                k_u8_26_reg_1648 <= grp_u64_to_u8_array_clone_fu_236_ap_return_10;
                k_u8_27_reg_1653 <= grp_u64_to_u8_array_clone_fu_236_ap_return_11;
                k_u8_28_reg_1658 <= grp_u64_to_u8_array_clone_fu_236_ap_return_12;
                k_u8_29_reg_1663 <= grp_u64_to_u8_array_clone_fu_236_ap_return_13;
                k_u8_30_reg_1668 <= grp_u64_to_u8_array_clone_fu_236_ap_return_14;
                k_u8_31_reg_1673 <= grp_u64_to_u8_array_clone_fu_236_ap_return_15;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((gmem_RVALID = ap_const_logic_0) or (gmem_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_630 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then
                reg_635 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln2_reg_1182 <= m(63 downto 3);
                trunc_ln3_reg_1187 <= ad(63 downto 3);
                trunc_ln4_reg_1192 <= nsec(63 downto 3);
                trunc_ln5_reg_1197 <= npub(63 downto 3);
                trunc_ln6_reg_1202 <= k(63 downto 3);
                trunc_ln_reg_1177 <= c(63 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state9, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, gmem_ARREADY, gmem_RVALID, grp_crypto_aead_encrypt_fu_462_ap_done, ap_CS_fsm_state25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((gmem_RVALID = ap_const_logic_0) or (gmem_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_crypto_aead_encrypt_fu_462_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state11 <= ap_NS_fsm(10);
    ap_NS_fsm_state13 <= ap_NS_fsm(12);
    ap_NS_fsm_state15 <= ap_NS_fsm(14);
    ap_NS_fsm_state17 <= ap_NS_fsm(16);

    ap_ST_fsm_state10_blk_assign_proc : process(gmem_ARREADY, gmem_RVALID)
    begin
        if (((gmem_RVALID = ap_const_logic_0) or (gmem_ARREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state21_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state22_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(grp_crypto_aead_encrypt_fu_462_ap_done)
    begin
        if ((grp_crypto_aead_encrypt_fu_462_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_crypto_aead_encrypt_fu_462_ap_done, ap_CS_fsm_state25)
    begin
        if (((grp_crypto_aead_encrypt_fu_462_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_crypto_aead_encrypt_fu_462_ap_done, ap_CS_fsm_state25)
    begin
        if (((grp_crypto_aead_encrypt_fu_462_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    c_u8_1_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_1_address0, grp_crypto_aead_encrypt_fu_462_c_1_address0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_1_address0 <= grp_crypto_aead_encrypt_fu_462_c_1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_1_address0 <= grp_u64_to_u8_array_fu_222_b_1_address0;
        else 
            c_u8_1_address0 <= "XXX";
        end if; 
    end process;


    c_u8_1_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_1_ce0, grp_crypto_aead_encrypt_fu_462_c_1_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_1_ce0 <= grp_crypto_aead_encrypt_fu_462_c_1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_1_ce0 <= grp_u64_to_u8_array_fu_222_b_1_ce0;
        else 
            c_u8_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_u8_1_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_1_d0, grp_crypto_aead_encrypt_fu_462_c_1_d0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_1_d0 <= grp_crypto_aead_encrypt_fu_462_c_1_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_1_d0 <= grp_u64_to_u8_array_fu_222_b_1_d0;
        else 
            c_u8_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    c_u8_1_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_1_we0, grp_crypto_aead_encrypt_fu_462_c_1_we0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_1_we0 <= grp_crypto_aead_encrypt_fu_462_c_1_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_1_we0 <= grp_u64_to_u8_array_fu_222_b_1_we0;
        else 
            c_u8_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_u8_2_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_2_address0, grp_crypto_aead_encrypt_fu_462_c_2_address0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_2_address0 <= grp_crypto_aead_encrypt_fu_462_c_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_2_address0 <= grp_u64_to_u8_array_fu_222_b_2_address0;
        else 
            c_u8_2_address0 <= "XXX";
        end if; 
    end process;


    c_u8_2_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_2_ce0, grp_crypto_aead_encrypt_fu_462_c_2_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_2_ce0 <= grp_crypto_aead_encrypt_fu_462_c_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_2_ce0 <= grp_u64_to_u8_array_fu_222_b_2_ce0;
        else 
            c_u8_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_u8_2_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_2_d0, grp_crypto_aead_encrypt_fu_462_c_2_d0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_2_d0 <= grp_crypto_aead_encrypt_fu_462_c_2_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_2_d0 <= grp_u64_to_u8_array_fu_222_b_2_d0;
        else 
            c_u8_2_d0 <= "XXXXXXXX";
        end if; 
    end process;


    c_u8_2_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_2_we0, grp_crypto_aead_encrypt_fu_462_c_2_we0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_2_we0 <= grp_crypto_aead_encrypt_fu_462_c_2_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_2_we0 <= grp_u64_to_u8_array_fu_222_b_2_we0;
        else 
            c_u8_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_u8_3_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_3_address0, grp_crypto_aead_encrypt_fu_462_c_3_address0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_3_address0 <= grp_crypto_aead_encrypt_fu_462_c_3_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_3_address0 <= grp_u64_to_u8_array_fu_222_b_3_address0;
        else 
            c_u8_3_address0 <= "XXX";
        end if; 
    end process;


    c_u8_3_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_3_ce0, grp_crypto_aead_encrypt_fu_462_c_3_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_3_ce0 <= grp_crypto_aead_encrypt_fu_462_c_3_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_3_ce0 <= grp_u64_to_u8_array_fu_222_b_3_ce0;
        else 
            c_u8_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_u8_3_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_3_d0, grp_crypto_aead_encrypt_fu_462_c_3_d0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_3_d0 <= grp_crypto_aead_encrypt_fu_462_c_3_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_3_d0 <= grp_u64_to_u8_array_fu_222_b_3_d0;
        else 
            c_u8_3_d0 <= "XXXXXXXX";
        end if; 
    end process;


    c_u8_3_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_3_we0, grp_crypto_aead_encrypt_fu_462_c_3_we0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_3_we0 <= grp_crypto_aead_encrypt_fu_462_c_3_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_3_we0 <= grp_u64_to_u8_array_fu_222_b_3_we0;
        else 
            c_u8_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_u8_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_0_address0, grp_crypto_aead_encrypt_fu_462_c_0_address0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_address0 <= grp_crypto_aead_encrypt_fu_462_c_0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_address0 <= grp_u64_to_u8_array_fu_222_b_0_address0;
        else 
            c_u8_address0 <= "XXX";
        end if; 
    end process;


    c_u8_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_0_ce0, grp_crypto_aead_encrypt_fu_462_c_0_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_ce0 <= grp_crypto_aead_encrypt_fu_462_c_0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_ce0 <= grp_u64_to_u8_array_fu_222_b_0_ce0;
        else 
            c_u8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_u8_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_0_d0, grp_crypto_aead_encrypt_fu_462_c_0_d0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_d0 <= grp_crypto_aead_encrypt_fu_462_c_0_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_d0 <= grp_u64_to_u8_array_fu_222_b_0_d0;
        else 
            c_u8_d0 <= "XXXXXXXX";
        end if; 
    end process;


    c_u8_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, grp_u64_to_u8_array_fu_222_b_0_we0, grp_crypto_aead_encrypt_fu_462_c_0_we0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_u8_we0 <= grp_crypto_aead_encrypt_fu_462_c_0_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            c_u8_we0 <= grp_u64_to_u8_array_fu_222_b_0_we0;
        else 
            c_u8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    call_ret44_u64_to_u8_array_clone_fu_298_p_read <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read1 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read10 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read11 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read12 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read13 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read14 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read15 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read2 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read3 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read4 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read5 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read6 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read7 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read8 <= "XXXXXXXX";
    call_ret44_u64_to_u8_array_clone_fu_298_p_read9 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read1 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read10 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read11 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read12 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read13 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read14 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read15 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read2 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read3 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read4 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read5 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read6 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read7 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read8 <= "XXXXXXXX";
    call_ret46_u64_to_u8_array_clone_fu_360_p_read9 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read1 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read10 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read11 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read12 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read13 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read14 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read15 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read2 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read3 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read4 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read5 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read6 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read7 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read8 <= "XXXXXXXX";
    call_ret48_u64_to_u8_array_clone_fu_422_p_read9 <= "XXXXXXXX";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, gmem_ARREADY, gmem_RVALID, sext_ln125_fu_701_p1, sext_ln130_fu_711_p1, sext_ln133_fu_721_p1, sext_ln136_fu_731_p1, sext_ln139_fu_741_p1, sext_ln142_fu_751_p1)
    begin
        if ((not(((gmem_RVALID = ap_const_logic_0) or (gmem_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARADDR <= sext_ln142_fu_751_p1;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_ARADDR <= sext_ln139_fu_741_p1;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            gmem_ARADDR <= sext_ln136_fu_731_p1;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            gmem_ARADDR <= sext_ln133_fu_721_p1;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARADDR <= sext_ln130_fu_711_p1;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARADDR <= sext_ln125_fu_701_p1;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, gmem_ARREADY, gmem_RVALID)
    begin
        if (((not(((gmem_RVALID = ap_const_logic_0) or (gmem_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            gmem_ARLEN <= ap_const_lv32_2;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLEN <= ap_const_lv32_4;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, gmem_ARREADY, gmem_RVALID)
    begin
        if (((not(((gmem_RVALID = ap_const_logic_0) or (gmem_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, gmem_ARREADY, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 
    = ap_CS_fsm_state11)) or (not(((gmem_RVALID = ap_const_logic_0) or (gmem_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_crypto_aead_encrypt_fu_462_ap_start <= grp_crypto_aead_encrypt_fu_462_ap_start_reg;

    grp_u64_to_u8_array_clone_fu_236_a_assign_proc : process(ap_CS_fsm_state23, reg_635, gmem_addr_1_read_reg_1248, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_a <= reg_635;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_a <= gmem_addr_1_read_reg_1248;
        else 
            grp_u64_to_u8_array_clone_fu_236_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_idx_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_idx <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_idx <= ap_const_lv4_0;
        else 
            grp_u64_to_u8_array_clone_fu_236_idx <= "XXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read_assign_proc : process(ap_CS_fsm_state23, k_u8_reg_1518, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read <= k_u8_reg_1518;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read1_assign_proc : process(ap_CS_fsm_state23, k_u8_1_reg_1523, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read1 <= k_u8_1_reg_1523;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read1 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read1 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read10_assign_proc : process(ap_CS_fsm_state23, k_u8_10_reg_1568, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read10 <= k_u8_10_reg_1568;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read10 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read10 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read11_assign_proc : process(ap_CS_fsm_state23, k_u8_11_reg_1573, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read11 <= k_u8_11_reg_1573;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read11 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read11 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read12_assign_proc : process(ap_CS_fsm_state23, k_u8_12_reg_1578, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read12 <= k_u8_12_reg_1578;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read12 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read12 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read13_assign_proc : process(ap_CS_fsm_state23, k_u8_13_reg_1583, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read13 <= k_u8_13_reg_1583;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read13 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read13 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read14_assign_proc : process(ap_CS_fsm_state23, k_u8_14_reg_1588, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read14 <= k_u8_14_reg_1588;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read14 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read14 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read15_assign_proc : process(ap_CS_fsm_state23, k_u8_15_reg_1593, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read15 <= k_u8_15_reg_1593;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read15 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read15 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read2_assign_proc : process(ap_CS_fsm_state23, k_u8_2_reg_1528, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read2 <= k_u8_2_reg_1528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read2 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read2 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read3_assign_proc : process(ap_CS_fsm_state23, k_u8_3_reg_1533, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read3 <= k_u8_3_reg_1533;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read3 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read3 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read4_assign_proc : process(ap_CS_fsm_state23, k_u8_4_reg_1538, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read4 <= k_u8_4_reg_1538;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read4 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read4 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read5_assign_proc : process(ap_CS_fsm_state23, k_u8_5_reg_1543, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read5 <= k_u8_5_reg_1543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read5 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read5 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read6_assign_proc : process(ap_CS_fsm_state23, k_u8_6_reg_1548, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read6 <= k_u8_6_reg_1548;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read6 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read6 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read7_assign_proc : process(ap_CS_fsm_state23, k_u8_7_reg_1553, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read7 <= k_u8_7_reg_1553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read7 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read7 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read8_assign_proc : process(ap_CS_fsm_state23, k_u8_8_reg_1558, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read8 <= k_u8_8_reg_1558;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read8 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read8 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_clone_fu_236_p_read9_assign_proc : process(ap_CS_fsm_state23, k_u8_9_reg_1563, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read9 <= k_u8_9_reg_1563;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_u64_to_u8_array_clone_fu_236_p_read9 <= "XXXXXXXX";
        else 
            grp_u64_to_u8_array_clone_fu_236_p_read9 <= "XXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_fu_222_a_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, reg_630, gmem_addr_read_2_reg_1243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_u64_to_u8_array_fu_222_a <= gmem_addr_read_2_reg_1243;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_u64_to_u8_array_fu_222_a <= reg_630;
        else 
            grp_u64_to_u8_array_fu_222_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_u64_to_u8_array_fu_222_ap_ce_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_u64_to_u8_array_fu_222_ap_ce <= ap_const_logic_1;
        else 
            grp_u64_to_u8_array_fu_222_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_u64_to_u8_array_fu_222_ap_start <= grp_u64_to_u8_array_fu_222_ap_start_reg;

    grp_u64_to_u8_array_fu_222_idx_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_u64_to_u8_array_fu_222_idx <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_u64_to_u8_array_fu_222_idx <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_u64_to_u8_array_fu_222_idx <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_u64_to_u8_array_fu_222_idx <= ap_const_lv5_0;
        else 
            grp_u64_to_u8_array_fu_222_idx <= "XXXXX";
        end if; 
    end process;

        sext_ln125_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1177),64));

        sext_ln130_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_1182),64));

        sext_ln133_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_1187),64));

        sext_ln136_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_1192),64));

        sext_ln139_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_reg_1197),64));

        sext_ln142_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_reg_1202),64));

end behav;
